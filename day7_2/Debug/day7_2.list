
day7_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08001bd4  08001bd4  00002bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d9c  08001d9c  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001d9c  08001d9c  00002d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001da4  08001da4  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da4  08001da4  00002da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001da8  08001da8  00002da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001dac  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          0000016c  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a88  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000830  00000000  00000000  00004b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00005348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000150  00000000  00000000  00005538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2fe  00000000  00000000  00005688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000027bc  00000000  00000000  0001f986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008da62  00000000  00000000  00022142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000afba4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f60  00000000  00000000  000afbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000b0b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  000b0b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001bbc 	.word	0x08001bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08001bbc 	.word	0x08001bbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

//void ITM_SendChar(uint8_t ch)
int __io_putchar(int ch)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	//Enable TRCENA
	DEMCR |= (1 << 24);
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <__io_putchar+0x44>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0d      	ldr	r2, [pc, #52]	@ (80002c4 <__io_putchar+0x44>)
 800028e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000292:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000294:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <__io_putchar+0x48>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0b      	ldr	r2, [pc, #44]	@ (80002c8 <__io_putchar+0x48>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002a0:	bf00      	nop
 80002a2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f003 0301 	and.w	r3, r3, #1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0f8      	beq.n	80002a2 <__io_putchar+0x22>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002b0:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6013      	str	r3, [r2, #0]

	return 1;
 80002b8:	2301      	movs	r3, #1
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	e000edfc 	.word	0xe000edfc
 80002c8:	e0000e00 	.word	0xe0000e00

080002cc <LedInit>:
 */
#include "led.h"
#include "stm32f4xx.h"


void LedInit(uint32_t pin) {
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80002d4:	4b28      	ldr	r3, [pc, #160]	@ (8000378 <LedInit+0xac>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a27      	ldr	r2, [pc, #156]	@ (8000378 <LedInit+0xac>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80002e0:	4b26      	ldr	r3, [pc, #152]	@ (800037c <LedInit+0xb0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	3201      	adds	r2, #1
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	43d2      	mvns	r2, r2
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a21      	ldr	r2, [pc, #132]	@ (800037c <LedInit+0xb0>)
 80002f6:	400b      	ands	r3, r1
 80002f8:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80002fa:	4b20      	ldr	r3, [pc, #128]	@ (800037c <LedInit+0xb0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	2101      	movs	r1, #1
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	4611      	mov	r1, r2
 800030a:	4a1c      	ldr	r2, [pc, #112]	@ (800037c <LedInit+0xb0>)
 800030c:	430b      	orrs	r3, r1
 800030e:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000310:	4b1a      	ldr	r3, [pc, #104]	@ (800037c <LedInit+0xb0>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	3201      	adds	r2, #1
 800031a:	2101      	movs	r1, #1
 800031c:	4091      	lsls	r1, r2
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	0052      	lsls	r2, r2, #1
 8000322:	2001      	movs	r0, #1
 8000324:	fa00 f202 	lsl.w	r2, r0, r2
 8000328:	430a      	orrs	r2, r1
 800032a:	43d2      	mvns	r2, r2
 800032c:	4611      	mov	r1, r2
 800032e:	4a13      	ldr	r2, [pc, #76]	@ (800037c <LedInit+0xb0>)
 8000330:	400b      	ands	r3, r1
 8000332:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000334:	4b11      	ldr	r3, [pc, #68]	@ (800037c <LedInit+0xb0>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	3201      	adds	r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	4091      	lsls	r1, r2
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	0052      	lsls	r2, r2, #1
 8000346:	2001      	movs	r0, #1
 8000348:	fa00 f202 	lsl.w	r2, r0, r2
 800034c:	430a      	orrs	r2, r1
 800034e:	43d2      	mvns	r2, r2
 8000350:	4611      	mov	r1, r2
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LedInit+0xb0>)
 8000354:	400b      	ands	r3, r1
 8000356:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <LedInit+0xb0>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	2101      	movs	r1, #1
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	43d2      	mvns	r2, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <LedInit+0xb0>)
 800036a:	400b      	ands	r3, r1
 800036c:	6053      	str	r3, [r2, #4]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40023800 	.word	0x40023800
 800037c:	40020c00 	.word	0x40020c00

08000380 <LedOn>:

void LedOn(uint32_t pin) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]

	LED_GPIO->BSRR = BV(pin);
 8000388:	2201      	movs	r2, #1
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	409a      	lsls	r2, r3
 800038e:	4b03      	ldr	r3, [pc, #12]	@ (800039c <LedOn+0x1c>)
 8000390:	619a      	str	r2, [r3, #24]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40020c00 	.word	0x40020c00

080003a0 <LedOff>:

void LedOff(uint32_t pin) {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

	LED_GPIO->BSRR = BV(pin+16);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3310      	adds	r3, #16
 80003ac:	2201      	movs	r2, #1
 80003ae:	409a      	lsls	r2, r3
 80003b0:	4b03      	ldr	r3, [pc, #12]	@ (80003c0 <LedOff+0x20>)
 80003b2:	619a      	str	r2, [r3, #24]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40020c00 	.word	0x40020c00

080003c4 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <DelayMs+0x44>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <DelayMs+0x48>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000410 <DelayMs+0x4c>)
 80003d8:	fba2 2303 	umull	r2, r3, r2, r3
 80003dc:	099b      	lsrs	r3, r3, #6
 80003de:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	fb02 f303 	mul.w	r3, r2, r3
 80003e8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003ea:	bf00      	nop
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <DelayMs+0x44>)
 80003ee:	685a      	ldr	r2, [r3, #4]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	1ad2      	subs	r2, r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d3f8      	bcc.n	80003ec <DelayMs+0x28>
}
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e0001000 	.word	0xe0001000
 800040c:	20000000 	.word	0x20000000
 8000410:	10624dd3 	.word	0x10624dd3

08000414 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{	int choice;
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	@ 0x28
 8000418:	af00      	add	r7, sp, #0
	SystemInit();
 800041a:	f000 f901 	bl	8000620 <SystemInit>
	UartInit(BAUD_9600);
 800041e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000422:	f000 f933 	bl	800068c <UartInit>

	LedInit(LED_RED);
 8000426:	200e      	movs	r0, #14
 8000428:	f7ff ff50 	bl	80002cc <LedInit>
	LedInit(LED_BLUE);
 800042c:	200f      	movs	r0, #15
 800042e:	f7ff ff4d 	bl	80002cc <LedInit>
	char str[32];


	while(1)
				{
		 	 	UartPuts("\nMenu:\r\n");
 8000432:	4823      	ldr	r0, [pc, #140]	@ (80004c0 <main+0xac>)
 8000434:	f000 f9c4 	bl	80007c0 <UartPuts>
		 	 	UartPuts("1. Red LED On\r\n");
 8000438:	4822      	ldr	r0, [pc, #136]	@ (80004c4 <main+0xb0>)
 800043a:	f000 f9c1 	bl	80007c0 <UartPuts>
		 	 	UartPuts("2. Red LED Off\r\n");
 800043e:	4822      	ldr	r0, [pc, #136]	@ (80004c8 <main+0xb4>)
 8000440:	f000 f9be 	bl	80007c0 <UartPuts>
		 	 	UartPuts("3. Blue LED On\r\n");
 8000444:	4821      	ldr	r0, [pc, #132]	@ (80004cc <main+0xb8>)
 8000446:	f000 f9bb 	bl	80007c0 <UartPuts>
		 	 	UartPuts("4. Blue LED Off\r\n");
 800044a:	4821      	ldr	r0, [pc, #132]	@ (80004d0 <main+0xbc>)
 800044c:	f000 f9b8 	bl	80007c0 <UartPuts>
		 	 	UartPuts("Enter your choice (1-4): \r\n");
 8000450:	4820      	ldr	r0, [pc, #128]	@ (80004d4 <main+0xc0>)
 8000452:	f000 f9b5 	bl	80007c0 <UartPuts>

		 	 	UartGets(str);
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f9cd 	bl	80007f8 <UartGets>
		 	 	sscanf(str, "%d", &choice);
 800045e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	491c      	ldr	r1, [pc, #112]	@ (80004d8 <main+0xc4>)
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fa16 	bl	8000898 <siscanf>
		        switch(choice)
 800046c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800046e:	3b01      	subs	r3, #1
 8000470:	2b03      	cmp	r3, #3
 8000472:	d821      	bhi.n	80004b8 <main+0xa4>
 8000474:	a201      	add	r2, pc, #4	@ (adr r2, 800047c <main+0x68>)
 8000476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047a:	bf00      	nop
 800047c:	0800048d 	.word	0x0800048d
 8000480:	0800049b 	.word	0x0800049b
 8000484:	080004a3 	.word	0x080004a3
 8000488:	080004b1 	.word	0x080004b1
		        {
		        case 1:
		        		DelayMs(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff ff99 	bl	80003c4 <DelayMs>
		        		LedOn(LED_RED);
 8000492:	200e      	movs	r0, #14
 8000494:	f7ff ff74 	bl	8000380 <LedOn>

		        		break;
 8000498:	e011      	b.n	80004be <main+0xaa>
		        case 2: LedOff(LED_RED);
 800049a:	200e      	movs	r0, #14
 800049c:	f7ff ff80 	bl	80003a0 <LedOff>
        				break;
 80004a0:	e00d      	b.n	80004be <main+0xaa>
		        case 3: DelayMs(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f7ff ff8e 	bl	80003c4 <DelayMs>
		        		LedOn(LED_BLUE);
 80004a8:	200f      	movs	r0, #15
 80004aa:	f7ff ff69 	bl	8000380 <LedOn>
		        		break;
 80004ae:	e006      	b.n	80004be <main+0xaa>
		        case 4: LedOff(LED_BLUE);
 80004b0:	200f      	movs	r0, #15
 80004b2:	f7ff ff75 	bl	80003a0 <LedOff>
		                break;
 80004b6:	e002      	b.n	80004be <main+0xaa>
		        default:
		                printf("Invalid choice. Please enter 1-4.\r\n");
 80004b8:	4808      	ldr	r0, [pc, #32]	@ (80004dc <main+0xc8>)
 80004ba:	f000 fb75 	bl	8000ba8 <puts>
		 	 	UartPuts("\nMenu:\r\n");
 80004be:	e7b8      	b.n	8000432 <main+0x1e>
 80004c0:	08001bd4 	.word	0x08001bd4
 80004c4:	08001be0 	.word	0x08001be0
 80004c8:	08001bf0 	.word	0x08001bf0
 80004cc:	08001c04 	.word	0x08001c04
 80004d0:	08001c18 	.word	0x08001c18
 80004d4:	08001c2c 	.word	0x08001c2c
 80004d8:	08001c48 	.word	0x08001c48
 80004dc:	08001c4c 	.word	0x08001c4c

080004e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e00a      	b.n	8000508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004f2:	f3af 8000 	nop.w
 80004f6:	4601      	mov	r1, r0
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	60ba      	str	r2, [r7, #8]
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf0      	blt.n	80004f2 <_read+0x12>
	}

return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e009      	b.n	8000540 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fea3 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf1      	blt.n	800052c <_write+0x12>
	}
	return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_close>:

int _close(int file)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000578:	605a      	str	r2, [r3, #4]
	return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_isatty>:

int _isatty(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
	return 1;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
	return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
	...

080005b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005bc:	4a14      	ldr	r2, [pc, #80]	@ (8000610 <_sbrk+0x5c>)
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <_sbrk+0x60>)
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <_sbrk+0x64>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	@ (800061c <_sbrk+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d207      	bcs.n	80005f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e4:	f000 fb36 	bl	8000c54 <__errno>
 80005e8:	4603      	mov	r3, r0
 80005ea:	220c      	movs	r2, #12
 80005ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f2:	e009      	b.n	8000608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <_sbrk+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20020000 	.word	0x20020000
 8000614:	00000400 	.word	0x00000400
 8000618:	2000007c 	.word	0x2000007c
 800061c:	200001d0 	.word	0x200001d0

08000620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  DWT_Init();
 8000624:	f000 f802 	bl	800062c <DWT_Init>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <DWT_Init+0x58>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	4a13      	ldr	r2, [pc, #76]	@ (8000684 <DWT_Init+0x58>)
 8000636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800063a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <DWT_Init+0x58>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a10      	ldr	r2, [pc, #64]	@ (8000684 <DWT_Init+0x58>)
 8000642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000646:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <DWT_Init+0x5c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <DWT_Init+0x5c>)
 800064e:	f023 0301 	bic.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <DWT_Init+0x5c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	@ (8000688 <DWT_Init+0x5c>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <DWT_Init+0x5c>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000666:	bf00      	nop
    __ASM volatile ("NOP");
 8000668:	bf00      	nop
    __ASM volatile ("NOP");
 800066a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <DWT_Init+0x5c>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf0c      	ite	eq
 8000674:	2301      	moveq	r3, #1
 8000676:	2300      	movne	r3, #0
 8000678:	b2db      	uxtb	r3, r3
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000edf0 	.word	0xe000edf0
 8000688:	e0001000 	.word	0xe0001000

0800068c <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000694:	4b31      	ldr	r3, [pc, #196]	@ (800075c <UartInit+0xd0>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000698:	4a30      	ldr	r2, [pc, #192]	@ (800075c <UartInit+0xd0>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 80006a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000760 <UartInit+0xd4>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	4a2e      	ldr	r2, [pc, #184]	@ (8000760 <UartInit+0xd4>)
 80006a6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80006aa:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80006ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <UartInit+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000760 <UartInit+0xd4>)
 80006b2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80006b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <UartInit+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a28      	ldr	r2, [pc, #160]	@ (8000760 <UartInit+0xd4>)
 80006be:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80006c2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <UartInit+0xd4>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4a25      	ldr	r2, [pc, #148]	@ (8000760 <UartInit+0xd4>)
 80006ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006ce:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <UartInit+0xd4>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a22      	ldr	r2, [pc, #136]	@ (8000760 <UartInit+0xd4>)
 80006d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006da:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <UartInit+0xd4>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000760 <UartInit+0xd4>)
 80006e2:	f023 030c 	bic.w	r3, r3, #12
 80006e6:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80006e8:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <UartInit+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <UartInit+0xd0>)
 80006ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <UartInit+0xd8>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <UartInit+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <UartInit+0xd8>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800070c:	d016      	beq.n	800073c <UartInit+0xb0>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000714:	d816      	bhi.n	8000744 <UartInit+0xb8>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800071c:	d004      	beq.n	8000728 <UartInit+0x9c>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000724:	d005      	beq.n	8000732 <UartInit+0xa6>
 8000726:	e00d      	b.n	8000744 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <UartInit+0xd8>)
 800072a:	f240 6283 	movw	r2, #1667	@ 0x683
 800072e:	609a      	str	r2, [r3, #8]
			break;
 8000730:	e008      	b.n	8000744 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <UartInit+0xd8>)
 8000734:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000738:	609a      	str	r2, [r3, #8]
			break;
 800073a:	e003      	b.n	8000744 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <UartInit+0xd8>)
 800073e:	228b      	movs	r2, #139	@ 0x8b
 8000740:	609a      	str	r2, [r3, #8]
			break;
 8000742:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <UartInit+0xd8>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4a06      	ldr	r2, [pc, #24]	@ (8000764 <UartInit+0xd8>)
 800074a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40020000 	.word	0x40020000
 8000764:	40004400 	.word	0x40004400

08000768 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000772:	bf00      	nop
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <UartPutch+0x28>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f9      	beq.n	8000774 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <UartPutch+0x28>)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	6053      	str	r3, [r2, #4]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40004400 	.word	0x40004400

08000794 <UartGetch>:

uint8_t UartGetch(void) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800079a:	bf00      	nop
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <UartGetch+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f9      	beq.n	800079c <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <UartGetch+0x28>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	71fb      	strb	r3, [r7, #7]
	return ch;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40004400 	.word	0x40004400

080007c0 <UartPuts>:

void UartPuts(char str[]) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e009      	b.n	80007e2 <UartPuts+0x22>
		UartPutch(str[i]);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffc6 	bl	8000768 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1ef      	bne.n	80007ce <UartPuts+0xe>
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <UartGets>:

void UartGets(char str[]) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	int i=0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000804:	f7ff ffc6 	bl	8000794 <UartGetch>
 8000808:	4603      	mov	r3, r0
 800080a:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	7afa      	ldrb	r2, [r7, #11]
 8000814:	701a      	strb	r2, [r3, #0]
		i++;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	2b0d      	cmp	r3, #13
 8000820:	d1f0      	bne.n	8000804 <UartGets+0xc>
	str[i] = '\n';
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	220a      	movs	r2, #10
 800082a:	701a      	strb	r2, [r3, #0]
	i++;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000848:	f7ff feea 	bl	8000620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	@ (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	@ (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f000 f9f5 	bl	8000c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fdcd 	bl	8000414 <main>

0800087a <LoopForever>:

LoopForever:
  b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000888:	08001dac 	.word	0x08001dac
  ldr r2, =_sbss
 800088c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000890:	200001cc 	.word	0x200001cc

08000894 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC_IRQHandler>
	...

08000898 <siscanf>:
 8000898:	b40e      	push	{r1, r2, r3}
 800089a:	b530      	push	{r4, r5, lr}
 800089c:	b09c      	sub	sp, #112	@ 0x70
 800089e:	ac1f      	add	r4, sp, #124	@ 0x7c
 80008a0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80008a4:	f854 5b04 	ldr.w	r5, [r4], #4
 80008a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80008ac:	9002      	str	r0, [sp, #8]
 80008ae:	9006      	str	r0, [sp, #24]
 80008b0:	f7ff fc8e 	bl	80001d0 <strlen>
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <siscanf+0x4c>)
 80008b6:	9003      	str	r0, [sp, #12]
 80008b8:	9007      	str	r0, [sp, #28]
 80008ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80008bc:	480a      	ldr	r0, [pc, #40]	@ (80008e8 <siscanf+0x50>)
 80008be:	9401      	str	r4, [sp, #4]
 80008c0:	2300      	movs	r3, #0
 80008c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80008c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80008c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80008ce:	462a      	mov	r2, r5
 80008d0:	4623      	mov	r3, r4
 80008d2:	a902      	add	r1, sp, #8
 80008d4:	6800      	ldr	r0, [r0, #0]
 80008d6:	f000 fa8d 	bl	8000df4 <__ssvfiscanf_r>
 80008da:	b01c      	add	sp, #112	@ 0x70
 80008dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80008e0:	b003      	add	sp, #12
 80008e2:	4770      	bx	lr
 80008e4:	0800090f 	.word	0x0800090f
 80008e8:	20000010 	.word	0x20000010

080008ec <__sread>:
 80008ec:	b510      	push	{r4, lr}
 80008ee:	460c      	mov	r4, r1
 80008f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f4:	f000 f98a 	bl	8000c0c <_read_r>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	bfab      	itete	ge
 80008fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008fe:	89a3      	ldrhlt	r3, [r4, #12]
 8000900:	181b      	addge	r3, r3, r0
 8000902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000906:	bfac      	ite	ge
 8000908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800090a:	81a3      	strhlt	r3, [r4, #12]
 800090c:	bd10      	pop	{r4, pc}

0800090e <__seofread>:
 800090e:	2000      	movs	r0, #0
 8000910:	4770      	bx	lr

08000912 <__swrite>:
 8000912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000916:	461f      	mov	r7, r3
 8000918:	898b      	ldrh	r3, [r1, #12]
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	4605      	mov	r5, r0
 800091e:	460c      	mov	r4, r1
 8000920:	4616      	mov	r6, r2
 8000922:	d505      	bpl.n	8000930 <__swrite+0x1e>
 8000924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000928:	2302      	movs	r3, #2
 800092a:	2200      	movs	r2, #0
 800092c:	f000 f95c 	bl	8000be8 <_lseek_r>
 8000930:	89a3      	ldrh	r3, [r4, #12]
 8000932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800093a:	81a3      	strh	r3, [r4, #12]
 800093c:	4632      	mov	r2, r6
 800093e:	463b      	mov	r3, r7
 8000940:	4628      	mov	r0, r5
 8000942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000946:	f000 b973 	b.w	8000c30 <_write_r>

0800094a <__sseek>:
 800094a:	b510      	push	{r4, lr}
 800094c:	460c      	mov	r4, r1
 800094e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000952:	f000 f949 	bl	8000be8 <_lseek_r>
 8000956:	1c43      	adds	r3, r0, #1
 8000958:	89a3      	ldrh	r3, [r4, #12]
 800095a:	bf15      	itete	ne
 800095c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800095e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000966:	81a3      	strheq	r3, [r4, #12]
 8000968:	bf18      	it	ne
 800096a:	81a3      	strhne	r3, [r4, #12]
 800096c:	bd10      	pop	{r4, pc}

0800096e <__sclose>:
 800096e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000972:	f000 b929 	b.w	8000bc8 <_close_r>
	...

08000978 <std>:
 8000978:	2300      	movs	r3, #0
 800097a:	b510      	push	{r4, lr}
 800097c:	4604      	mov	r4, r0
 800097e:	e9c0 3300 	strd	r3, r3, [r0]
 8000982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000986:	6083      	str	r3, [r0, #8]
 8000988:	8181      	strh	r1, [r0, #12]
 800098a:	6643      	str	r3, [r0, #100]	@ 0x64
 800098c:	81c2      	strh	r2, [r0, #14]
 800098e:	6183      	str	r3, [r0, #24]
 8000990:	4619      	mov	r1, r3
 8000992:	2208      	movs	r2, #8
 8000994:	305c      	adds	r0, #92	@ 0x5c
 8000996:	f000 f90f 	bl	8000bb8 <memset>
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <std+0x58>)
 800099c:	6263      	str	r3, [r4, #36]	@ 0x24
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <std+0x5c>)
 80009a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <std+0x60>)
 80009a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <std+0x64>)
 80009a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <std+0x68>)
 80009ac:	6224      	str	r4, [r4, #32]
 80009ae:	429c      	cmp	r4, r3
 80009b0:	d006      	beq.n	80009c0 <std+0x48>
 80009b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009b6:	4294      	cmp	r4, r2
 80009b8:	d002      	beq.n	80009c0 <std+0x48>
 80009ba:	33d0      	adds	r3, #208	@ 0xd0
 80009bc:	429c      	cmp	r4, r3
 80009be:	d105      	bne.n	80009cc <std+0x54>
 80009c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c8:	f000 b96e 	b.w	8000ca8 <__retarget_lock_init_recursive>
 80009cc:	bd10      	pop	{r4, pc}
 80009ce:	bf00      	nop
 80009d0:	080008ed 	.word	0x080008ed
 80009d4:	08000913 	.word	0x08000913
 80009d8:	0800094b 	.word	0x0800094b
 80009dc:	0800096f 	.word	0x0800096f
 80009e0:	20000080 	.word	0x20000080

080009e4 <stdio_exit_handler>:
 80009e4:	4a02      	ldr	r2, [pc, #8]	@ (80009f0 <stdio_exit_handler+0xc>)
 80009e6:	4903      	ldr	r1, [pc, #12]	@ (80009f4 <stdio_exit_handler+0x10>)
 80009e8:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <stdio_exit_handler+0x14>)
 80009ea:	f000 b869 	b.w	8000ac0 <_fwalk_sglue>
 80009ee:	bf00      	nop
 80009f0:	20000004 	.word	0x20000004
 80009f4:	08001631 	.word	0x08001631
 80009f8:	20000014 	.word	0x20000014

080009fc <cleanup_stdio>:
 80009fc:	6841      	ldr	r1, [r0, #4]
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <cleanup_stdio+0x34>)
 8000a00:	4299      	cmp	r1, r3
 8000a02:	b510      	push	{r4, lr}
 8000a04:	4604      	mov	r4, r0
 8000a06:	d001      	beq.n	8000a0c <cleanup_stdio+0x10>
 8000a08:	f000 fe12 	bl	8001630 <_fflush_r>
 8000a0c:	68a1      	ldr	r1, [r4, #8]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <cleanup_stdio+0x38>)
 8000a10:	4299      	cmp	r1, r3
 8000a12:	d002      	beq.n	8000a1a <cleanup_stdio+0x1e>
 8000a14:	4620      	mov	r0, r4
 8000a16:	f000 fe0b 	bl	8001630 <_fflush_r>
 8000a1a:	68e1      	ldr	r1, [r4, #12]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <cleanup_stdio+0x3c>)
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d004      	beq.n	8000a2c <cleanup_stdio+0x30>
 8000a22:	4620      	mov	r0, r4
 8000a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a28:	f000 be02 	b.w	8001630 <_fflush_r>
 8000a2c:	bd10      	pop	{r4, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000080 	.word	0x20000080
 8000a34:	200000e8 	.word	0x200000e8
 8000a38:	20000150 	.word	0x20000150

08000a3c <global_stdio_init.part.0>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <global_stdio_init.part.0+0x30>)
 8000a40:	4c0b      	ldr	r4, [pc, #44]	@ (8000a70 <global_stdio_init.part.0+0x34>)
 8000a42:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <global_stdio_init.part.0+0x38>)
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	4620      	mov	r0, r4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	f7ff ff94 	bl	8000978 <std>
 8000a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a54:	2201      	movs	r2, #1
 8000a56:	2109      	movs	r1, #9
 8000a58:	f7ff ff8e 	bl	8000978 <std>
 8000a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a60:	2202      	movs	r2, #2
 8000a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a66:	2112      	movs	r1, #18
 8000a68:	f7ff bf86 	b.w	8000978 <std>
 8000a6c:	200001b8 	.word	0x200001b8
 8000a70:	20000080 	.word	0x20000080
 8000a74:	080009e5 	.word	0x080009e5

08000a78 <__sfp_lock_acquire>:
 8000a78:	4801      	ldr	r0, [pc, #4]	@ (8000a80 <__sfp_lock_acquire+0x8>)
 8000a7a:	f000 b916 	b.w	8000caa <__retarget_lock_acquire_recursive>
 8000a7e:	bf00      	nop
 8000a80:	200001c1 	.word	0x200001c1

08000a84 <__sfp_lock_release>:
 8000a84:	4801      	ldr	r0, [pc, #4]	@ (8000a8c <__sfp_lock_release+0x8>)
 8000a86:	f000 b911 	b.w	8000cac <__retarget_lock_release_recursive>
 8000a8a:	bf00      	nop
 8000a8c:	200001c1 	.word	0x200001c1

08000a90 <__sinit>:
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fff0 	bl	8000a78 <__sfp_lock_acquire>
 8000a98:	6a23      	ldr	r3, [r4, #32]
 8000a9a:	b11b      	cbz	r3, 8000aa4 <__sinit+0x14>
 8000a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa0:	f7ff bff0 	b.w	8000a84 <__sfp_lock_release>
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <__sinit+0x28>)
 8000aa6:	6223      	str	r3, [r4, #32]
 8000aa8:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <__sinit+0x2c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f5      	bne.n	8000a9c <__sinit+0xc>
 8000ab0:	f7ff ffc4 	bl	8000a3c <global_stdio_init.part.0>
 8000ab4:	e7f2      	b.n	8000a9c <__sinit+0xc>
 8000ab6:	bf00      	nop
 8000ab8:	080009fd 	.word	0x080009fd
 8000abc:	200001b8 	.word	0x200001b8

08000ac0 <_fwalk_sglue>:
 8000ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac4:	4607      	mov	r7, r0
 8000ac6:	4688      	mov	r8, r1
 8000ac8:	4614      	mov	r4, r2
 8000aca:	2600      	movs	r6, #0
 8000acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8000ad4:	d505      	bpl.n	8000ae2 <_fwalk_sglue+0x22>
 8000ad6:	6824      	ldr	r4, [r4, #0]
 8000ad8:	2c00      	cmp	r4, #0
 8000ada:	d1f7      	bne.n	8000acc <_fwalk_sglue+0xc>
 8000adc:	4630      	mov	r0, r6
 8000ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ae2:	89ab      	ldrh	r3, [r5, #12]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d907      	bls.n	8000af8 <_fwalk_sglue+0x38>
 8000ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000aec:	3301      	adds	r3, #1
 8000aee:	d003      	beq.n	8000af8 <_fwalk_sglue+0x38>
 8000af0:	4629      	mov	r1, r5
 8000af2:	4638      	mov	r0, r7
 8000af4:	47c0      	blx	r8
 8000af6:	4306      	orrs	r6, r0
 8000af8:	3568      	adds	r5, #104	@ 0x68
 8000afa:	e7e9      	b.n	8000ad0 <_fwalk_sglue+0x10>

08000afc <_puts_r>:
 8000afc:	6a03      	ldr	r3, [r0, #32]
 8000afe:	b570      	push	{r4, r5, r6, lr}
 8000b00:	6884      	ldr	r4, [r0, #8]
 8000b02:	4605      	mov	r5, r0
 8000b04:	460e      	mov	r6, r1
 8000b06:	b90b      	cbnz	r3, 8000b0c <_puts_r+0x10>
 8000b08:	f7ff ffc2 	bl	8000a90 <__sinit>
 8000b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b0e:	07db      	lsls	r3, r3, #31
 8000b10:	d405      	bmi.n	8000b1e <_puts_r+0x22>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	0598      	lsls	r0, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_puts_r+0x22>
 8000b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b1a:	f000 f8c6 	bl	8000caa <__retarget_lock_acquire_recursive>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	0719      	lsls	r1, r3, #28
 8000b22:	d502      	bpl.n	8000b2a <_puts_r+0x2e>
 8000b24:	6923      	ldr	r3, [r4, #16]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d135      	bne.n	8000b96 <_puts_r+0x9a>
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	f000 ff45 	bl	80019bc <__swsetup_r>
 8000b32:	b380      	cbz	r0, 8000b96 <_puts_r+0x9a>
 8000b34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000b38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b3a:	07da      	lsls	r2, r3, #31
 8000b3c:	d405      	bmi.n	8000b4a <_puts_r+0x4e>
 8000b3e:	89a3      	ldrh	r3, [r4, #12]
 8000b40:	059b      	lsls	r3, r3, #22
 8000b42:	d402      	bmi.n	8000b4a <_puts_r+0x4e>
 8000b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b46:	f000 f8b1 	bl	8000cac <__retarget_lock_release_recursive>
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	da04      	bge.n	8000b5c <_puts_r+0x60>
 8000b52:	69a2      	ldr	r2, [r4, #24]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dc17      	bgt.n	8000b88 <_puts_r+0x8c>
 8000b58:	290a      	cmp	r1, #10
 8000b5a:	d015      	beq.n	8000b88 <_puts_r+0x8c>
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	6022      	str	r2, [r4, #0]
 8000b62:	7019      	strb	r1, [r3, #0]
 8000b64:	68a3      	ldr	r3, [r4, #8]
 8000b66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	60a3      	str	r3, [r4, #8]
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d1ed      	bne.n	8000b4e <_puts_r+0x52>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da11      	bge.n	8000b9a <_puts_r+0x9e>
 8000b76:	4622      	mov	r2, r4
 8000b78:	210a      	movs	r1, #10
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 fee0 	bl	8001940 <__swbuf_r>
 8000b80:	3001      	adds	r0, #1
 8000b82:	d0d7      	beq.n	8000b34 <_puts_r+0x38>
 8000b84:	250a      	movs	r5, #10
 8000b86:	e7d7      	b.n	8000b38 <_puts_r+0x3c>
 8000b88:	4622      	mov	r2, r4
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f000 fed8 	bl	8001940 <__swbuf_r>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d1e7      	bne.n	8000b64 <_puts_r+0x68>
 8000b94:	e7ce      	b.n	8000b34 <_puts_r+0x38>
 8000b96:	3e01      	subs	r6, #1
 8000b98:	e7e4      	b.n	8000b64 <_puts_r+0x68>
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	6022      	str	r2, [r4, #0]
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e7ee      	b.n	8000b84 <_puts_r+0x88>
	...

08000ba8 <puts>:
 8000ba8:	4b02      	ldr	r3, [pc, #8]	@ (8000bb4 <puts+0xc>)
 8000baa:	4601      	mov	r1, r0
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f7ff bfa5 	b.w	8000afc <_puts_r>
 8000bb2:	bf00      	nop
 8000bb4:	20000010 	.word	0x20000010

08000bb8 <memset>:
 8000bb8:	4402      	add	r2, r0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d100      	bne.n	8000bc2 <memset+0xa>
 8000bc0:	4770      	bx	lr
 8000bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8000bc6:	e7f9      	b.n	8000bbc <memset+0x4>

08000bc8 <_close_r>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	4d06      	ldr	r5, [pc, #24]	@ (8000be4 <_close_r+0x1c>)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	602b      	str	r3, [r5, #0]
 8000bd4:	f7ff fcbd 	bl	8000552 <_close>
 8000bd8:	1c43      	adds	r3, r0, #1
 8000bda:	d102      	bne.n	8000be2 <_close_r+0x1a>
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	b103      	cbz	r3, 8000be2 <_close_r+0x1a>
 8000be0:	6023      	str	r3, [r4, #0]
 8000be2:	bd38      	pop	{r3, r4, r5, pc}
 8000be4:	200001bc 	.word	0x200001bc

08000be8 <_lseek_r>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4d07      	ldr	r5, [pc, #28]	@ (8000c08 <_lseek_r+0x20>)
 8000bec:	4604      	mov	r4, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	602a      	str	r2, [r5, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f7ff fccf 	bl	800059a <_lseek>
 8000bfc:	1c43      	adds	r3, r0, #1
 8000bfe:	d102      	bne.n	8000c06 <_lseek_r+0x1e>
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	b103      	cbz	r3, 8000c06 <_lseek_r+0x1e>
 8000c04:	6023      	str	r3, [r4, #0]
 8000c06:	bd38      	pop	{r3, r4, r5, pc}
 8000c08:	200001bc 	.word	0x200001bc

08000c0c <_read_r>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	4d07      	ldr	r5, [pc, #28]	@ (8000c2c <_read_r+0x20>)
 8000c10:	4604      	mov	r4, r0
 8000c12:	4608      	mov	r0, r1
 8000c14:	4611      	mov	r1, r2
 8000c16:	2200      	movs	r2, #0
 8000c18:	602a      	str	r2, [r5, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f7ff fc60 	bl	80004e0 <_read>
 8000c20:	1c43      	adds	r3, r0, #1
 8000c22:	d102      	bne.n	8000c2a <_read_r+0x1e>
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	b103      	cbz	r3, 8000c2a <_read_r+0x1e>
 8000c28:	6023      	str	r3, [r4, #0]
 8000c2a:	bd38      	pop	{r3, r4, r5, pc}
 8000c2c:	200001bc 	.word	0x200001bc

08000c30 <_write_r>:
 8000c30:	b538      	push	{r3, r4, r5, lr}
 8000c32:	4d07      	ldr	r5, [pc, #28]	@ (8000c50 <_write_r+0x20>)
 8000c34:	4604      	mov	r4, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4611      	mov	r1, r2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	602a      	str	r2, [r5, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f7ff fc6b 	bl	800051a <_write>
 8000c44:	1c43      	adds	r3, r0, #1
 8000c46:	d102      	bne.n	8000c4e <_write_r+0x1e>
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	b103      	cbz	r3, 8000c4e <_write_r+0x1e>
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	bd38      	pop	{r3, r4, r5, pc}
 8000c50:	200001bc 	.word	0x200001bc

08000c54 <__errno>:
 8000c54:	4b01      	ldr	r3, [pc, #4]	@ (8000c5c <__errno+0x8>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000010 	.word	0x20000010

08000c60 <__libc_init_array>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	4d0d      	ldr	r5, [pc, #52]	@ (8000c98 <__libc_init_array+0x38>)
 8000c64:	4c0d      	ldr	r4, [pc, #52]	@ (8000c9c <__libc_init_array+0x3c>)
 8000c66:	1b64      	subs	r4, r4, r5
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	42a6      	cmp	r6, r4
 8000c6e:	d109      	bne.n	8000c84 <__libc_init_array+0x24>
 8000c70:	4d0b      	ldr	r5, [pc, #44]	@ (8000ca0 <__libc_init_array+0x40>)
 8000c72:	4c0c      	ldr	r4, [pc, #48]	@ (8000ca4 <__libc_init_array+0x44>)
 8000c74:	f000 ffa2 	bl	8001bbc <_init>
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	10a4      	asrs	r4, r4, #2
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	42a6      	cmp	r6, r4
 8000c80:	d105      	bne.n	8000c8e <__libc_init_array+0x2e>
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
 8000c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c88:	4798      	blx	r3
 8000c8a:	3601      	adds	r6, #1
 8000c8c:	e7ee      	b.n	8000c6c <__libc_init_array+0xc>
 8000c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c92:	4798      	blx	r3
 8000c94:	3601      	adds	r6, #1
 8000c96:	e7f2      	b.n	8000c7e <__libc_init_array+0x1e>
 8000c98:	08001da4 	.word	0x08001da4
 8000c9c:	08001da4 	.word	0x08001da4
 8000ca0:	08001da4 	.word	0x08001da4
 8000ca4:	08001da8 	.word	0x08001da8

08000ca8 <__retarget_lock_init_recursive>:
 8000ca8:	4770      	bx	lr

08000caa <__retarget_lock_acquire_recursive>:
 8000caa:	4770      	bx	lr

08000cac <__retarget_lock_release_recursive>:
 8000cac:	4770      	bx	lr
	...

08000cb0 <_free_r>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	4605      	mov	r5, r0
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d041      	beq.n	8000d3c <_free_r+0x8c>
 8000cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cbc:	1f0c      	subs	r4, r1, #4
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bfb8      	it	lt
 8000cc2:	18e4      	addlt	r4, r4, r3
 8000cc4:	f000 fcdc 	bl	8001680 <__malloc_lock>
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d40 <_free_r+0x90>)
 8000cca:	6813      	ldr	r3, [r2, #0]
 8000ccc:	b933      	cbnz	r3, 8000cdc <_free_r+0x2c>
 8000cce:	6063      	str	r3, [r4, #4]
 8000cd0:	6014      	str	r4, [r2, #0]
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 bcd8 	b.w	800168c <__malloc_unlock>
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d908      	bls.n	8000cf2 <_free_r+0x42>
 8000ce0:	6820      	ldr	r0, [r4, #0]
 8000ce2:	1821      	adds	r1, r4, r0
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	bf01      	itttt	eq
 8000ce8:	6819      	ldreq	r1, [r3, #0]
 8000cea:	685b      	ldreq	r3, [r3, #4]
 8000cec:	1809      	addeq	r1, r1, r0
 8000cee:	6021      	streq	r1, [r4, #0]
 8000cf0:	e7ed      	b.n	8000cce <_free_r+0x1e>
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	b10b      	cbz	r3, 8000cfc <_free_r+0x4c>
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	d9fa      	bls.n	8000cf2 <_free_r+0x42>
 8000cfc:	6811      	ldr	r1, [r2, #0]
 8000cfe:	1850      	adds	r0, r2, r1
 8000d00:	42a0      	cmp	r0, r4
 8000d02:	d10b      	bne.n	8000d1c <_free_r+0x6c>
 8000d04:	6820      	ldr	r0, [r4, #0]
 8000d06:	4401      	add	r1, r0
 8000d08:	1850      	adds	r0, r2, r1
 8000d0a:	4283      	cmp	r3, r0
 8000d0c:	6011      	str	r1, [r2, #0]
 8000d0e:	d1e0      	bne.n	8000cd2 <_free_r+0x22>
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	6053      	str	r3, [r2, #4]
 8000d16:	4408      	add	r0, r1
 8000d18:	6010      	str	r0, [r2, #0]
 8000d1a:	e7da      	b.n	8000cd2 <_free_r+0x22>
 8000d1c:	d902      	bls.n	8000d24 <_free_r+0x74>
 8000d1e:	230c      	movs	r3, #12
 8000d20:	602b      	str	r3, [r5, #0]
 8000d22:	e7d6      	b.n	8000cd2 <_free_r+0x22>
 8000d24:	6820      	ldr	r0, [r4, #0]
 8000d26:	1821      	adds	r1, r4, r0
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	bf04      	itt	eq
 8000d2c:	6819      	ldreq	r1, [r3, #0]
 8000d2e:	685b      	ldreq	r3, [r3, #4]
 8000d30:	6063      	str	r3, [r4, #4]
 8000d32:	bf04      	itt	eq
 8000d34:	1809      	addeq	r1, r1, r0
 8000d36:	6021      	streq	r1, [r4, #0]
 8000d38:	6054      	str	r4, [r2, #4]
 8000d3a:	e7ca      	b.n	8000cd2 <_free_r+0x22>
 8000d3c:	bd38      	pop	{r3, r4, r5, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001c8 	.word	0x200001c8

08000d44 <_sungetc_r>:
 8000d44:	b538      	push	{r3, r4, r5, lr}
 8000d46:	1c4b      	adds	r3, r1, #1
 8000d48:	4614      	mov	r4, r2
 8000d4a:	d103      	bne.n	8000d54 <_sungetc_r+0x10>
 8000d4c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000d50:	4628      	mov	r0, r5
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
 8000d54:	8993      	ldrh	r3, [r2, #12]
 8000d56:	f023 0320 	bic.w	r3, r3, #32
 8000d5a:	8193      	strh	r3, [r2, #12]
 8000d5c:	6853      	ldr	r3, [r2, #4]
 8000d5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000d60:	b2cd      	uxtb	r5, r1
 8000d62:	b18a      	cbz	r2, 8000d88 <_sungetc_r+0x44>
 8000d64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000d66:	429a      	cmp	r2, r3
 8000d68:	dd08      	ble.n	8000d7c <_sungetc_r+0x38>
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	1e5a      	subs	r2, r3, #1
 8000d6e:	6022      	str	r2, [r4, #0]
 8000d70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	3301      	adds	r3, #1
 8000d78:	6063      	str	r3, [r4, #4]
 8000d7a:	e7e9      	b.n	8000d50 <_sungetc_r+0xc>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	f000 fc8b 	bl	8001698 <__submore>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d0f1      	beq.n	8000d6a <_sungetc_r+0x26>
 8000d86:	e7e1      	b.n	8000d4c <_sungetc_r+0x8>
 8000d88:	6921      	ldr	r1, [r4, #16]
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	b141      	cbz	r1, 8000da0 <_sungetc_r+0x5c>
 8000d8e:	4291      	cmp	r1, r2
 8000d90:	d206      	bcs.n	8000da0 <_sungetc_r+0x5c>
 8000d92:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000d96:	42a9      	cmp	r1, r5
 8000d98:	d102      	bne.n	8000da0 <_sungetc_r+0x5c>
 8000d9a:	3a01      	subs	r2, #1
 8000d9c:	6022      	str	r2, [r4, #0]
 8000d9e:	e7ea      	b.n	8000d76 <_sungetc_r+0x32>
 8000da0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000da4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000da8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000daa:	2303      	movs	r3, #3
 8000dac:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000dae:	4623      	mov	r3, r4
 8000db0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	e7de      	b.n	8000d78 <_sungetc_r+0x34>

08000dba <__ssrefill_r>:
 8000dba:	b510      	push	{r4, lr}
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000dc0:	b169      	cbz	r1, 8000dde <__ssrefill_r+0x24>
 8000dc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	d001      	beq.n	8000dce <__ssrefill_r+0x14>
 8000dca:	f7ff ff71 	bl	8000cb0 <_free_r>
 8000dce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dd0:	6063      	str	r3, [r4, #4]
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	6360      	str	r0, [r4, #52]	@ 0x34
 8000dd6:	b113      	cbz	r3, 8000dde <__ssrefill_r+0x24>
 8000dd8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000dda:	6023      	str	r3, [r4, #0]
 8000ddc:	bd10      	pop	{r4, pc}
 8000dde:	6923      	ldr	r3, [r4, #16]
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	6063      	str	r3, [r4, #4]
 8000de6:	89a3      	ldrh	r3, [r4, #12]
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	81a3      	strh	r3, [r4, #12]
 8000dee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000df2:	e7f3      	b.n	8000ddc <__ssrefill_r+0x22>

08000df4 <__ssvfiscanf_r>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	460c      	mov	r4, r1
 8000dfa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000dfe:	2100      	movs	r1, #0
 8000e00:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000e04:	49a5      	ldr	r1, [pc, #660]	@ (800109c <__ssvfiscanf_r+0x2a8>)
 8000e06:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000e08:	f10d 0804 	add.w	r8, sp, #4
 8000e0c:	49a4      	ldr	r1, [pc, #656]	@ (80010a0 <__ssvfiscanf_r+0x2ac>)
 8000e0e:	4fa5      	ldr	r7, [pc, #660]	@ (80010a4 <__ssvfiscanf_r+0x2b0>)
 8000e10:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000e14:	4606      	mov	r6, r0
 8000e16:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	7813      	ldrb	r3, [r2, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 8158 	beq.w	80010d2 <__ssvfiscanf_r+0x2de>
 8000e22:	5cf9      	ldrb	r1, [r7, r3]
 8000e24:	f011 0108 	ands.w	r1, r1, #8
 8000e28:	f102 0501 	add.w	r5, r2, #1
 8000e2c:	d019      	beq.n	8000e62 <__ssvfiscanf_r+0x6e>
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dd0f      	ble.n	8000e54 <__ssvfiscanf_r+0x60>
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	5cba      	ldrb	r2, [r7, r2]
 8000e3a:	0712      	lsls	r2, r2, #28
 8000e3c:	d401      	bmi.n	8000e42 <__ssvfiscanf_r+0x4e>
 8000e3e:	462a      	mov	r2, r5
 8000e40:	e7eb      	b.n	8000e1a <__ssvfiscanf_r+0x26>
 8000e42:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000e44:	3201      	adds	r2, #1
 8000e46:	9245      	str	r2, [sp, #276]	@ 0x114
 8000e48:	6862      	ldr	r2, [r4, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	6062      	str	r2, [r4, #4]
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	e7ec      	b.n	8000e2e <__ssvfiscanf_r+0x3a>
 8000e54:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000e56:	4621      	mov	r1, r4
 8000e58:	4630      	mov	r0, r6
 8000e5a:	4798      	blx	r3
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d0e9      	beq.n	8000e34 <__ssvfiscanf_r+0x40>
 8000e60:	e7ed      	b.n	8000e3e <__ssvfiscanf_r+0x4a>
 8000e62:	2b25      	cmp	r3, #37	@ 0x25
 8000e64:	d012      	beq.n	8000e8c <__ssvfiscanf_r+0x98>
 8000e66:	4699      	mov	r9, r3
 8000e68:	6863      	ldr	r3, [r4, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f340 8093 	ble.w	8000f96 <__ssvfiscanf_r+0x1a2>
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	7813      	ldrb	r3, [r2, #0]
 8000e74:	454b      	cmp	r3, r9
 8000e76:	f040 812c 	bne.w	80010d2 <__ssvfiscanf_r+0x2de>
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	6063      	str	r3, [r4, #4]
 8000e80:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000e82:	3201      	adds	r2, #1
 8000e84:	3301      	adds	r3, #1
 8000e86:	6022      	str	r2, [r4, #0]
 8000e88:	9345      	str	r3, [sp, #276]	@ 0x114
 8000e8a:	e7d8      	b.n	8000e3e <__ssvfiscanf_r+0x4a>
 8000e8c:	9141      	str	r1, [sp, #260]	@ 0x104
 8000e8e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000e90:	7853      	ldrb	r3, [r2, #1]
 8000e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e94:	bf02      	ittt	eq
 8000e96:	2310      	moveq	r3, #16
 8000e98:	1c95      	addeq	r5, r2, #2
 8000e9a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000e9c:	220a      	movs	r2, #10
 8000e9e:	46a9      	mov	r9, r5
 8000ea0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000ea4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	d91e      	bls.n	8000eea <__ssvfiscanf_r+0xf6>
 8000eac:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80010a8 <__ssvfiscanf_r+0x2b4>
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4650      	mov	r0, sl
 8000eb4:	f7ff f994 	bl	80001e0 <memchr>
 8000eb8:	b138      	cbz	r0, 8000eca <__ssvfiscanf_r+0xd6>
 8000eba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000ebc:	eba0 000a 	sub.w	r0, r0, sl
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	4083      	lsls	r3, r0
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	9341      	str	r3, [sp, #260]	@ 0x104
 8000ec8:	464d      	mov	r5, r9
 8000eca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000ece:	2b78      	cmp	r3, #120	@ 0x78
 8000ed0:	d806      	bhi.n	8000ee0 <__ssvfiscanf_r+0xec>
 8000ed2:	2b57      	cmp	r3, #87	@ 0x57
 8000ed4:	d810      	bhi.n	8000ef8 <__ssvfiscanf_r+0x104>
 8000ed6:	2b25      	cmp	r3, #37	@ 0x25
 8000ed8:	d0c5      	beq.n	8000e66 <__ssvfiscanf_r+0x72>
 8000eda:	d857      	bhi.n	8000f8c <__ssvfiscanf_r+0x198>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d065      	beq.n	8000fac <__ssvfiscanf_r+0x1b8>
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	9342      	str	r3, [sp, #264]	@ 0x108
 8000ee8:	e078      	b.n	8000fdc <__ssvfiscanf_r+0x1e8>
 8000eea:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000eec:	fb02 1103 	mla	r1, r2, r3, r1
 8000ef0:	3930      	subs	r1, #48	@ 0x30
 8000ef2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000ef4:	464d      	mov	r5, r9
 8000ef6:	e7d2      	b.n	8000e9e <__ssvfiscanf_r+0xaa>
 8000ef8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000efc:	2a20      	cmp	r2, #32
 8000efe:	d8ef      	bhi.n	8000ee0 <__ssvfiscanf_r+0xec>
 8000f00:	a101      	add	r1, pc, #4	@ (adr r1, 8000f08 <__ssvfiscanf_r+0x114>)
 8000f02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000fbb 	.word	0x08000fbb
 8000f0c:	08000ee1 	.word	0x08000ee1
 8000f10:	08000ee1 	.word	0x08000ee1
 8000f14:	08001015 	.word	0x08001015
 8000f18:	08000ee1 	.word	0x08000ee1
 8000f1c:	08000ee1 	.word	0x08000ee1
 8000f20:	08000ee1 	.word	0x08000ee1
 8000f24:	08000ee1 	.word	0x08000ee1
 8000f28:	08000ee1 	.word	0x08000ee1
 8000f2c:	08000ee1 	.word	0x08000ee1
 8000f30:	08000ee1 	.word	0x08000ee1
 8000f34:	0800102b 	.word	0x0800102b
 8000f38:	08001011 	.word	0x08001011
 8000f3c:	08000f93 	.word	0x08000f93
 8000f40:	08000f93 	.word	0x08000f93
 8000f44:	08000f93 	.word	0x08000f93
 8000f48:	08000ee1 	.word	0x08000ee1
 8000f4c:	08000fcd 	.word	0x08000fcd
 8000f50:	08000ee1 	.word	0x08000ee1
 8000f54:	08000ee1 	.word	0x08000ee1
 8000f58:	08000ee1 	.word	0x08000ee1
 8000f5c:	08000ee1 	.word	0x08000ee1
 8000f60:	0800103b 	.word	0x0800103b
 8000f64:	08000fd5 	.word	0x08000fd5
 8000f68:	08000fb3 	.word	0x08000fb3
 8000f6c:	08000ee1 	.word	0x08000ee1
 8000f70:	08000ee1 	.word	0x08000ee1
 8000f74:	08001037 	.word	0x08001037
 8000f78:	08000ee1 	.word	0x08000ee1
 8000f7c:	08001011 	.word	0x08001011
 8000f80:	08000ee1 	.word	0x08000ee1
 8000f84:	08000ee1 	.word	0x08000ee1
 8000f88:	08000fbb 	.word	0x08000fbb
 8000f8c:	3b45      	subs	r3, #69	@ 0x45
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d8a6      	bhi.n	8000ee0 <__ssvfiscanf_r+0xec>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e021      	b.n	8000fda <__ssvfiscanf_r+0x1e6>
 8000f96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000f98:	4621      	mov	r1, r4
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	4798      	blx	r3
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	f43f af66 	beq.w	8000e70 <__ssvfiscanf_r+0x7c>
 8000fa4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	f040 808b 	bne.w	80010c2 <__ssvfiscanf_r+0x2ce>
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fb0:	e08b      	b.n	80010ca <__ssvfiscanf_r+0x2d6>
 8000fb2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	9241      	str	r2, [sp, #260]	@ 0x104
 8000fba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fc0:	9241      	str	r2, [sp, #260]	@ 0x104
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	2b6e      	cmp	r3, #110	@ 0x6e
 8000fc6:	9242      	str	r2, [sp, #264]	@ 0x108
 8000fc8:	d902      	bls.n	8000fd0 <__ssvfiscanf_r+0x1dc>
 8000fca:	e005      	b.n	8000fd8 <__ssvfiscanf_r+0x1e4>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9342      	str	r3, [sp, #264]	@ 0x108
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e002      	b.n	8000fda <__ssvfiscanf_r+0x1e6>
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	9342      	str	r3, [sp, #264]	@ 0x108
 8000fd8:	2304      	movs	r3, #4
 8000fda:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000fdc:	6863      	ldr	r3, [r4, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dd39      	ble.n	8001056 <__ssvfiscanf_r+0x262>
 8000fe2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000fe4:	0659      	lsls	r1, r3, #25
 8000fe6:	d404      	bmi.n	8000ff2 <__ssvfiscanf_r+0x1fe>
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	5cba      	ldrb	r2, [r7, r2]
 8000fee:	0712      	lsls	r2, r2, #28
 8000ff0:	d438      	bmi.n	8001064 <__ssvfiscanf_r+0x270>
 8000ff2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	dc47      	bgt.n	8001088 <__ssvfiscanf_r+0x294>
 8000ff8:	466b      	mov	r3, sp
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	a941      	add	r1, sp, #260	@ 0x104
 8000ffe:	4630      	mov	r0, r6
 8001000:	f000 f90e 	bl	8001220 <_scanf_chars>
 8001004:	2801      	cmp	r0, #1
 8001006:	d064      	beq.n	80010d2 <__ssvfiscanf_r+0x2de>
 8001008:	2802      	cmp	r0, #2
 800100a:	f47f af18 	bne.w	8000e3e <__ssvfiscanf_r+0x4a>
 800100e:	e7c9      	b.n	8000fa4 <__ssvfiscanf_r+0x1b0>
 8001010:	220a      	movs	r2, #10
 8001012:	e7d7      	b.n	8000fc4 <__ssvfiscanf_r+0x1d0>
 8001014:	4629      	mov	r1, r5
 8001016:	4640      	mov	r0, r8
 8001018:	f000 fa50 	bl	80014bc <__sccl>
 800101c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800101e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001022:	9341      	str	r3, [sp, #260]	@ 0x104
 8001024:	4605      	mov	r5, r0
 8001026:	2301      	movs	r3, #1
 8001028:	e7d7      	b.n	8000fda <__ssvfiscanf_r+0x1e6>
 800102a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800102c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001030:	9341      	str	r3, [sp, #260]	@ 0x104
 8001032:	2300      	movs	r3, #0
 8001034:	e7d1      	b.n	8000fda <__ssvfiscanf_r+0x1e6>
 8001036:	2302      	movs	r3, #2
 8001038:	e7cf      	b.n	8000fda <__ssvfiscanf_r+0x1e6>
 800103a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800103c:	06c3      	lsls	r3, r0, #27
 800103e:	f53f aefe 	bmi.w	8000e3e <__ssvfiscanf_r+0x4a>
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001046:	1d19      	adds	r1, r3, #4
 8001048:	9100      	str	r1, [sp, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	07c0      	lsls	r0, r0, #31
 800104e:	bf4c      	ite	mi
 8001050:	801a      	strhmi	r2, [r3, #0]
 8001052:	601a      	strpl	r2, [r3, #0]
 8001054:	e6f3      	b.n	8000e3e <__ssvfiscanf_r+0x4a>
 8001056:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001058:	4621      	mov	r1, r4
 800105a:	4630      	mov	r0, r6
 800105c:	4798      	blx	r3
 800105e:	2800      	cmp	r0, #0
 8001060:	d0bf      	beq.n	8000fe2 <__ssvfiscanf_r+0x1ee>
 8001062:	e79f      	b.n	8000fa4 <__ssvfiscanf_r+0x1b0>
 8001064:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001066:	3201      	adds	r2, #1
 8001068:	9245      	str	r2, [sp, #276]	@ 0x114
 800106a:	6862      	ldr	r2, [r4, #4]
 800106c:	3a01      	subs	r2, #1
 800106e:	2a00      	cmp	r2, #0
 8001070:	6062      	str	r2, [r4, #4]
 8001072:	dd02      	ble.n	800107a <__ssvfiscanf_r+0x286>
 8001074:	3301      	adds	r3, #1
 8001076:	6023      	str	r3, [r4, #0]
 8001078:	e7b6      	b.n	8000fe8 <__ssvfiscanf_r+0x1f4>
 800107a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800107c:	4621      	mov	r1, r4
 800107e:	4630      	mov	r0, r6
 8001080:	4798      	blx	r3
 8001082:	2800      	cmp	r0, #0
 8001084:	d0b0      	beq.n	8000fe8 <__ssvfiscanf_r+0x1f4>
 8001086:	e78d      	b.n	8000fa4 <__ssvfiscanf_r+0x1b0>
 8001088:	2b04      	cmp	r3, #4
 800108a:	dc0f      	bgt.n	80010ac <__ssvfiscanf_r+0x2b8>
 800108c:	466b      	mov	r3, sp
 800108e:	4622      	mov	r2, r4
 8001090:	a941      	add	r1, sp, #260	@ 0x104
 8001092:	4630      	mov	r0, r6
 8001094:	f000 f91e 	bl	80012d4 <_scanf_i>
 8001098:	e7b4      	b.n	8001004 <__ssvfiscanf_r+0x210>
 800109a:	bf00      	nop
 800109c:	08000d45 	.word	0x08000d45
 80010a0:	08000dbb 	.word	0x08000dbb
 80010a4:	08001c9c 	.word	0x08001c9c
 80010a8:	08001c7c 	.word	0x08001c7c
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <__ssvfiscanf_r+0x2e4>)
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f43f aec5 	beq.w	8000e3e <__ssvfiscanf_r+0x4a>
 80010b4:	466b      	mov	r3, sp
 80010b6:	4622      	mov	r2, r4
 80010b8:	a941      	add	r1, sp, #260	@ 0x104
 80010ba:	4630      	mov	r0, r6
 80010bc:	f3af 8000 	nop.w
 80010c0:	e7a0      	b.n	8001004 <__ssvfiscanf_r+0x210>
 80010c2:	89a3      	ldrh	r3, [r4, #12]
 80010c4:	065b      	lsls	r3, r3, #25
 80010c6:	f53f af71 	bmi.w	8000fac <__ssvfiscanf_r+0x1b8>
 80010ca:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80010ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80010d4:	e7f9      	b.n	80010ca <__ssvfiscanf_r+0x2d6>
 80010d6:	bf00      	nop
 80010d8:	00000000 	.word	0x00000000

080010dc <sbrk_aligned>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	4e0f      	ldr	r6, [pc, #60]	@ (800111c <sbrk_aligned+0x40>)
 80010e0:	460c      	mov	r4, r1
 80010e2:	6831      	ldr	r1, [r6, #0]
 80010e4:	4605      	mov	r5, r0
 80010e6:	b911      	cbnz	r1, 80010ee <sbrk_aligned+0x12>
 80010e8:	f000 fd42 	bl	8001b70 <_sbrk_r>
 80010ec:	6030      	str	r0, [r6, #0]
 80010ee:	4621      	mov	r1, r4
 80010f0:	4628      	mov	r0, r5
 80010f2:	f000 fd3d 	bl	8001b70 <_sbrk_r>
 80010f6:	1c43      	adds	r3, r0, #1
 80010f8:	d103      	bne.n	8001102 <sbrk_aligned+0x26>
 80010fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80010fe:	4620      	mov	r0, r4
 8001100:	bd70      	pop	{r4, r5, r6, pc}
 8001102:	1cc4      	adds	r4, r0, #3
 8001104:	f024 0403 	bic.w	r4, r4, #3
 8001108:	42a0      	cmp	r0, r4
 800110a:	d0f8      	beq.n	80010fe <sbrk_aligned+0x22>
 800110c:	1a21      	subs	r1, r4, r0
 800110e:	4628      	mov	r0, r5
 8001110:	f000 fd2e 	bl	8001b70 <_sbrk_r>
 8001114:	3001      	adds	r0, #1
 8001116:	d1f2      	bne.n	80010fe <sbrk_aligned+0x22>
 8001118:	e7ef      	b.n	80010fa <sbrk_aligned+0x1e>
 800111a:	bf00      	nop
 800111c:	200001c4 	.word	0x200001c4

08001120 <_malloc_r>:
 8001120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001124:	1ccd      	adds	r5, r1, #3
 8001126:	f025 0503 	bic.w	r5, r5, #3
 800112a:	3508      	adds	r5, #8
 800112c:	2d0c      	cmp	r5, #12
 800112e:	bf38      	it	cc
 8001130:	250c      	movcc	r5, #12
 8001132:	2d00      	cmp	r5, #0
 8001134:	4606      	mov	r6, r0
 8001136:	db01      	blt.n	800113c <_malloc_r+0x1c>
 8001138:	42a9      	cmp	r1, r5
 800113a:	d904      	bls.n	8001146 <_malloc_r+0x26>
 800113c:	230c      	movs	r3, #12
 800113e:	6033      	str	r3, [r6, #0]
 8001140:	2000      	movs	r0, #0
 8001142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800121c <_malloc_r+0xfc>
 800114a:	f000 fa99 	bl	8001680 <__malloc_lock>
 800114e:	f8d8 3000 	ldr.w	r3, [r8]
 8001152:	461c      	mov	r4, r3
 8001154:	bb44      	cbnz	r4, 80011a8 <_malloc_r+0x88>
 8001156:	4629      	mov	r1, r5
 8001158:	4630      	mov	r0, r6
 800115a:	f7ff ffbf 	bl	80010dc <sbrk_aligned>
 800115e:	1c43      	adds	r3, r0, #1
 8001160:	4604      	mov	r4, r0
 8001162:	d158      	bne.n	8001216 <_malloc_r+0xf6>
 8001164:	f8d8 4000 	ldr.w	r4, [r8]
 8001168:	4627      	mov	r7, r4
 800116a:	2f00      	cmp	r7, #0
 800116c:	d143      	bne.n	80011f6 <_malloc_r+0xd6>
 800116e:	2c00      	cmp	r4, #0
 8001170:	d04b      	beq.n	800120a <_malloc_r+0xea>
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	4639      	mov	r1, r7
 8001176:	4630      	mov	r0, r6
 8001178:	eb04 0903 	add.w	r9, r4, r3
 800117c:	f000 fcf8 	bl	8001b70 <_sbrk_r>
 8001180:	4581      	cmp	r9, r0
 8001182:	d142      	bne.n	800120a <_malloc_r+0xea>
 8001184:	6821      	ldr	r1, [r4, #0]
 8001186:	1a6d      	subs	r5, r5, r1
 8001188:	4629      	mov	r1, r5
 800118a:	4630      	mov	r0, r6
 800118c:	f7ff ffa6 	bl	80010dc <sbrk_aligned>
 8001190:	3001      	adds	r0, #1
 8001192:	d03a      	beq.n	800120a <_malloc_r+0xea>
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	442b      	add	r3, r5
 8001198:	6023      	str	r3, [r4, #0]
 800119a:	f8d8 3000 	ldr.w	r3, [r8]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	bb62      	cbnz	r2, 80011fc <_malloc_r+0xdc>
 80011a2:	f8c8 7000 	str.w	r7, [r8]
 80011a6:	e00f      	b.n	80011c8 <_malloc_r+0xa8>
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	1b52      	subs	r2, r2, r5
 80011ac:	d420      	bmi.n	80011f0 <_malloc_r+0xd0>
 80011ae:	2a0b      	cmp	r2, #11
 80011b0:	d917      	bls.n	80011e2 <_malloc_r+0xc2>
 80011b2:	1961      	adds	r1, r4, r5
 80011b4:	42a3      	cmp	r3, r4
 80011b6:	6025      	str	r5, [r4, #0]
 80011b8:	bf18      	it	ne
 80011ba:	6059      	strne	r1, [r3, #4]
 80011bc:	6863      	ldr	r3, [r4, #4]
 80011be:	bf08      	it	eq
 80011c0:	f8c8 1000 	streq.w	r1, [r8]
 80011c4:	5162      	str	r2, [r4, r5]
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	4630      	mov	r0, r6
 80011ca:	f000 fa5f 	bl	800168c <__malloc_unlock>
 80011ce:	f104 000b 	add.w	r0, r4, #11
 80011d2:	1d23      	adds	r3, r4, #4
 80011d4:	f020 0007 	bic.w	r0, r0, #7
 80011d8:	1ac2      	subs	r2, r0, r3
 80011da:	bf1c      	itt	ne
 80011dc:	1a1b      	subne	r3, r3, r0
 80011de:	50a3      	strne	r3, [r4, r2]
 80011e0:	e7af      	b.n	8001142 <_malloc_r+0x22>
 80011e2:	6862      	ldr	r2, [r4, #4]
 80011e4:	42a3      	cmp	r3, r4
 80011e6:	bf0c      	ite	eq
 80011e8:	f8c8 2000 	streq.w	r2, [r8]
 80011ec:	605a      	strne	r2, [r3, #4]
 80011ee:	e7eb      	b.n	80011c8 <_malloc_r+0xa8>
 80011f0:	4623      	mov	r3, r4
 80011f2:	6864      	ldr	r4, [r4, #4]
 80011f4:	e7ae      	b.n	8001154 <_malloc_r+0x34>
 80011f6:	463c      	mov	r4, r7
 80011f8:	687f      	ldr	r7, [r7, #4]
 80011fa:	e7b6      	b.n	800116a <_malloc_r+0x4a>
 80011fc:	461a      	mov	r2, r3
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	42a3      	cmp	r3, r4
 8001202:	d1fb      	bne.n	80011fc <_malloc_r+0xdc>
 8001204:	2300      	movs	r3, #0
 8001206:	6053      	str	r3, [r2, #4]
 8001208:	e7de      	b.n	80011c8 <_malloc_r+0xa8>
 800120a:	230c      	movs	r3, #12
 800120c:	6033      	str	r3, [r6, #0]
 800120e:	4630      	mov	r0, r6
 8001210:	f000 fa3c 	bl	800168c <__malloc_unlock>
 8001214:	e794      	b.n	8001140 <_malloc_r+0x20>
 8001216:	6005      	str	r5, [r0, #0]
 8001218:	e7d6      	b.n	80011c8 <_malloc_r+0xa8>
 800121a:	bf00      	nop
 800121c:	200001c8 	.word	0x200001c8

08001220 <_scanf_chars>:
 8001220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001224:	4615      	mov	r5, r2
 8001226:	688a      	ldr	r2, [r1, #8]
 8001228:	4680      	mov	r8, r0
 800122a:	460c      	mov	r4, r1
 800122c:	b932      	cbnz	r2, 800123c <_scanf_chars+0x1c>
 800122e:	698a      	ldr	r2, [r1, #24]
 8001230:	2a00      	cmp	r2, #0
 8001232:	bf14      	ite	ne
 8001234:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8001238:	2201      	moveq	r2, #1
 800123a:	608a      	str	r2, [r1, #8]
 800123c:	6822      	ldr	r2, [r4, #0]
 800123e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80012d0 <_scanf_chars+0xb0>
 8001242:	06d1      	lsls	r1, r2, #27
 8001244:	bf5f      	itttt	pl
 8001246:	681a      	ldrpl	r2, [r3, #0]
 8001248:	1d11      	addpl	r1, r2, #4
 800124a:	6019      	strpl	r1, [r3, #0]
 800124c:	6816      	ldrpl	r6, [r2, #0]
 800124e:	2700      	movs	r7, #0
 8001250:	69a0      	ldr	r0, [r4, #24]
 8001252:	b188      	cbz	r0, 8001278 <_scanf_chars+0x58>
 8001254:	2801      	cmp	r0, #1
 8001256:	d107      	bne.n	8001268 <_scanf_chars+0x48>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	6963      	ldr	r3, [r4, #20]
 800125e:	5c9b      	ldrb	r3, [r3, r2]
 8001260:	b953      	cbnz	r3, 8001278 <_scanf_chars+0x58>
 8001262:	2f00      	cmp	r7, #0
 8001264:	d031      	beq.n	80012ca <_scanf_chars+0xaa>
 8001266:	e022      	b.n	80012ae <_scanf_chars+0x8e>
 8001268:	2802      	cmp	r0, #2
 800126a:	d120      	bne.n	80012ae <_scanf_chars+0x8e>
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001274:	071b      	lsls	r3, r3, #28
 8001276:	d41a      	bmi.n	80012ae <_scanf_chars+0x8e>
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	06da      	lsls	r2, r3, #27
 800127c:	bf5e      	ittt	pl
 800127e:	682b      	ldrpl	r3, [r5, #0]
 8001280:	781b      	ldrbpl	r3, [r3, #0]
 8001282:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001286:	682a      	ldr	r2, [r5, #0]
 8001288:	686b      	ldr	r3, [r5, #4]
 800128a:	3201      	adds	r2, #1
 800128c:	602a      	str	r2, [r5, #0]
 800128e:	68a2      	ldr	r2, [r4, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	3a01      	subs	r2, #1
 8001294:	606b      	str	r3, [r5, #4]
 8001296:	3701      	adds	r7, #1
 8001298:	60a2      	str	r2, [r4, #8]
 800129a:	b142      	cbz	r2, 80012ae <_scanf_chars+0x8e>
 800129c:	2b00      	cmp	r3, #0
 800129e:	dcd7      	bgt.n	8001250 <_scanf_chars+0x30>
 80012a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80012a4:	4629      	mov	r1, r5
 80012a6:	4640      	mov	r0, r8
 80012a8:	4798      	blx	r3
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d0d0      	beq.n	8001250 <_scanf_chars+0x30>
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f013 0310 	ands.w	r3, r3, #16
 80012b4:	d105      	bne.n	80012c2 <_scanf_chars+0xa2>
 80012b6:	68e2      	ldr	r2, [r4, #12]
 80012b8:	3201      	adds	r2, #1
 80012ba:	60e2      	str	r2, [r4, #12]
 80012bc:	69a2      	ldr	r2, [r4, #24]
 80012be:	b102      	cbz	r2, 80012c2 <_scanf_chars+0xa2>
 80012c0:	7033      	strb	r3, [r6, #0]
 80012c2:	6923      	ldr	r3, [r4, #16]
 80012c4:	443b      	add	r3, r7
 80012c6:	6123      	str	r3, [r4, #16]
 80012c8:	2000      	movs	r0, #0
 80012ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ce:	bf00      	nop
 80012d0:	08001c9c 	.word	0x08001c9c

080012d4 <_scanf_i>:
 80012d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d8:	4698      	mov	r8, r3
 80012da:	4b74      	ldr	r3, [pc, #464]	@ (80014ac <_scanf_i+0x1d8>)
 80012dc:	460c      	mov	r4, r1
 80012de:	4682      	mov	sl, r0
 80012e0:	4616      	mov	r6, r2
 80012e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012e6:	b087      	sub	sp, #28
 80012e8:	ab03      	add	r3, sp, #12
 80012ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012ee:	4b70      	ldr	r3, [pc, #448]	@ (80014b0 <_scanf_i+0x1dc>)
 80012f0:	69a1      	ldr	r1, [r4, #24]
 80012f2:	4a70      	ldr	r2, [pc, #448]	@ (80014b4 <_scanf_i+0x1e0>)
 80012f4:	2903      	cmp	r1, #3
 80012f6:	bf08      	it	eq
 80012f8:	461a      	moveq	r2, r3
 80012fa:	68a3      	ldr	r3, [r4, #8]
 80012fc:	9201      	str	r2, [sp, #4]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001304:	bf88      	it	hi
 8001306:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800130a:	4627      	mov	r7, r4
 800130c:	bf82      	ittt	hi
 800130e:	eb03 0905 	addhi.w	r9, r3, r5
 8001312:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8001316:	60a3      	strhi	r3, [r4, #8]
 8001318:	f857 3b1c 	ldr.w	r3, [r7], #28
 800131c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8001320:	bf98      	it	ls
 8001322:	f04f 0900 	movls.w	r9, #0
 8001326:	6023      	str	r3, [r4, #0]
 8001328:	463d      	mov	r5, r7
 800132a:	f04f 0b00 	mov.w	fp, #0
 800132e:	6831      	ldr	r1, [r6, #0]
 8001330:	ab03      	add	r3, sp, #12
 8001332:	7809      	ldrb	r1, [r1, #0]
 8001334:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001338:	2202      	movs	r2, #2
 800133a:	f7fe ff51 	bl	80001e0 <memchr>
 800133e:	b328      	cbz	r0, 800138c <_scanf_i+0xb8>
 8001340:	f1bb 0f01 	cmp.w	fp, #1
 8001344:	d159      	bne.n	80013fa <_scanf_i+0x126>
 8001346:	6862      	ldr	r2, [r4, #4]
 8001348:	b92a      	cbnz	r2, 8001356 <_scanf_i+0x82>
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	2108      	movs	r1, #8
 800134e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001352:	6061      	str	r1, [r4, #4]
 8001354:	6022      	str	r2, [r4, #0]
 8001356:	6822      	ldr	r2, [r4, #0]
 8001358:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800135c:	6022      	str	r2, [r4, #0]
 800135e:	68a2      	ldr	r2, [r4, #8]
 8001360:	1e51      	subs	r1, r2, #1
 8001362:	60a1      	str	r1, [r4, #8]
 8001364:	b192      	cbz	r2, 800138c <_scanf_i+0xb8>
 8001366:	6832      	ldr	r2, [r6, #0]
 8001368:	1c51      	adds	r1, r2, #1
 800136a:	6031      	str	r1, [r6, #0]
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	f805 2b01 	strb.w	r2, [r5], #1
 8001372:	6872      	ldr	r2, [r6, #4]
 8001374:	3a01      	subs	r2, #1
 8001376:	2a00      	cmp	r2, #0
 8001378:	6072      	str	r2, [r6, #4]
 800137a:	dc07      	bgt.n	800138c <_scanf_i+0xb8>
 800137c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8001380:	4631      	mov	r1, r6
 8001382:	4650      	mov	r0, sl
 8001384:	4790      	blx	r2
 8001386:	2800      	cmp	r0, #0
 8001388:	f040 8085 	bne.w	8001496 <_scanf_i+0x1c2>
 800138c:	f10b 0b01 	add.w	fp, fp, #1
 8001390:	f1bb 0f03 	cmp.w	fp, #3
 8001394:	d1cb      	bne.n	800132e <_scanf_i+0x5a>
 8001396:	6863      	ldr	r3, [r4, #4]
 8001398:	b90b      	cbnz	r3, 800139e <_scanf_i+0xca>
 800139a:	230a      	movs	r3, #10
 800139c:	6063      	str	r3, [r4, #4]
 800139e:	6863      	ldr	r3, [r4, #4]
 80013a0:	4945      	ldr	r1, [pc, #276]	@ (80014b8 <_scanf_i+0x1e4>)
 80013a2:	6960      	ldr	r0, [r4, #20]
 80013a4:	1ac9      	subs	r1, r1, r3
 80013a6:	f000 f889 	bl	80014bc <__sccl>
 80013aa:	f04f 0b00 	mov.w	fp, #0
 80013ae:	68a3      	ldr	r3, [r4, #8]
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03d      	beq.n	8001432 <_scanf_i+0x15e>
 80013b6:	6831      	ldr	r1, [r6, #0]
 80013b8:	6960      	ldr	r0, [r4, #20]
 80013ba:	f891 c000 	ldrb.w	ip, [r1]
 80013be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d035      	beq.n	8001432 <_scanf_i+0x15e>
 80013c6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80013ca:	d124      	bne.n	8001416 <_scanf_i+0x142>
 80013cc:	0510      	lsls	r0, r2, #20
 80013ce:	d522      	bpl.n	8001416 <_scanf_i+0x142>
 80013d0:	f10b 0b01 	add.w	fp, fp, #1
 80013d4:	f1b9 0f00 	cmp.w	r9, #0
 80013d8:	d003      	beq.n	80013e2 <_scanf_i+0x10e>
 80013da:	3301      	adds	r3, #1
 80013dc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80013e0:	60a3      	str	r3, [r4, #8]
 80013e2:	6873      	ldr	r3, [r6, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	6073      	str	r3, [r6, #4]
 80013ea:	dd1b      	ble.n	8001424 <_scanf_i+0x150>
 80013ec:	6833      	ldr	r3, [r6, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	6033      	str	r3, [r6, #0]
 80013f2:	68a3      	ldr	r3, [r4, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60a3      	str	r3, [r4, #8]
 80013f8:	e7d9      	b.n	80013ae <_scanf_i+0xda>
 80013fa:	f1bb 0f02 	cmp.w	fp, #2
 80013fe:	d1ae      	bne.n	800135e <_scanf_i+0x8a>
 8001400:	6822      	ldr	r2, [r4, #0]
 8001402:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8001406:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800140a:	d1bf      	bne.n	800138c <_scanf_i+0xb8>
 800140c:	2110      	movs	r1, #16
 800140e:	6061      	str	r1, [r4, #4]
 8001410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001414:	e7a2      	b.n	800135c <_scanf_i+0x88>
 8001416:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800141a:	6022      	str	r2, [r4, #0]
 800141c:	780b      	ldrb	r3, [r1, #0]
 800141e:	f805 3b01 	strb.w	r3, [r5], #1
 8001422:	e7de      	b.n	80013e2 <_scanf_i+0x10e>
 8001424:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001428:	4631      	mov	r1, r6
 800142a:	4650      	mov	r0, sl
 800142c:	4798      	blx	r3
 800142e:	2800      	cmp	r0, #0
 8001430:	d0df      	beq.n	80013f2 <_scanf_i+0x11e>
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	05d9      	lsls	r1, r3, #23
 8001436:	d50d      	bpl.n	8001454 <_scanf_i+0x180>
 8001438:	42bd      	cmp	r5, r7
 800143a:	d909      	bls.n	8001450 <_scanf_i+0x17c>
 800143c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001440:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001444:	4632      	mov	r2, r6
 8001446:	4650      	mov	r0, sl
 8001448:	4798      	blx	r3
 800144a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800144e:	464d      	mov	r5, r9
 8001450:	42bd      	cmp	r5, r7
 8001452:	d028      	beq.n	80014a6 <_scanf_i+0x1d2>
 8001454:	6822      	ldr	r2, [r4, #0]
 8001456:	f012 0210 	ands.w	r2, r2, #16
 800145a:	d113      	bne.n	8001484 <_scanf_i+0x1b0>
 800145c:	702a      	strb	r2, [r5, #0]
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	9e01      	ldr	r6, [sp, #4]
 8001462:	4639      	mov	r1, r7
 8001464:	4650      	mov	r0, sl
 8001466:	47b0      	blx	r6
 8001468:	f8d8 3000 	ldr.w	r3, [r8]
 800146c:	6821      	ldr	r1, [r4, #0]
 800146e:	1d1a      	adds	r2, r3, #4
 8001470:	f8c8 2000 	str.w	r2, [r8]
 8001474:	f011 0f20 	tst.w	r1, #32
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	d00f      	beq.n	800149c <_scanf_i+0x1c8>
 800147c:	6018      	str	r0, [r3, #0]
 800147e:	68e3      	ldr	r3, [r4, #12]
 8001480:	3301      	adds	r3, #1
 8001482:	60e3      	str	r3, [r4, #12]
 8001484:	6923      	ldr	r3, [r4, #16]
 8001486:	1bed      	subs	r5, r5, r7
 8001488:	445d      	add	r5, fp
 800148a:	442b      	add	r3, r5
 800148c:	6123      	str	r3, [r4, #16]
 800148e:	2000      	movs	r0, #0
 8001490:	b007      	add	sp, #28
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	f04f 0b00 	mov.w	fp, #0
 800149a:	e7ca      	b.n	8001432 <_scanf_i+0x15e>
 800149c:	07ca      	lsls	r2, r1, #31
 800149e:	bf4c      	ite	mi
 80014a0:	8018      	strhmi	r0, [r3, #0]
 80014a2:	6018      	strpl	r0, [r3, #0]
 80014a4:	e7eb      	b.n	800147e <_scanf_i+0x1aa>
 80014a6:	2001      	movs	r0, #1
 80014a8:	e7f2      	b.n	8001490 <_scanf_i+0x1bc>
 80014aa:	bf00      	nop
 80014ac:	08001c70 	.word	0x08001c70
 80014b0:	0800185d 	.word	0x0800185d
 80014b4:	0800193d 	.word	0x0800193d
 80014b8:	08001c90 	.word	0x08001c90

080014bc <__sccl>:
 80014bc:	b570      	push	{r4, r5, r6, lr}
 80014be:	780b      	ldrb	r3, [r1, #0]
 80014c0:	4604      	mov	r4, r0
 80014c2:	2b5e      	cmp	r3, #94	@ 0x5e
 80014c4:	bf0b      	itete	eq
 80014c6:	784b      	ldrbeq	r3, [r1, #1]
 80014c8:	1c4a      	addne	r2, r1, #1
 80014ca:	1c8a      	addeq	r2, r1, #2
 80014cc:	2100      	movne	r1, #0
 80014ce:	bf08      	it	eq
 80014d0:	2101      	moveq	r1, #1
 80014d2:	3801      	subs	r0, #1
 80014d4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80014d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80014dc:	42a8      	cmp	r0, r5
 80014de:	d1fb      	bne.n	80014d8 <__sccl+0x1c>
 80014e0:	b90b      	cbnz	r3, 80014e6 <__sccl+0x2a>
 80014e2:	1e50      	subs	r0, r2, #1
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
 80014e6:	f081 0101 	eor.w	r1, r1, #1
 80014ea:	54e1      	strb	r1, [r4, r3]
 80014ec:	4610      	mov	r0, r2
 80014ee:	4602      	mov	r2, r0
 80014f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80014f4:	2d2d      	cmp	r5, #45	@ 0x2d
 80014f6:	d005      	beq.n	8001504 <__sccl+0x48>
 80014f8:	2d5d      	cmp	r5, #93	@ 0x5d
 80014fa:	d016      	beq.n	800152a <__sccl+0x6e>
 80014fc:	2d00      	cmp	r5, #0
 80014fe:	d0f1      	beq.n	80014e4 <__sccl+0x28>
 8001500:	462b      	mov	r3, r5
 8001502:	e7f2      	b.n	80014ea <__sccl+0x2e>
 8001504:	7846      	ldrb	r6, [r0, #1]
 8001506:	2e5d      	cmp	r6, #93	@ 0x5d
 8001508:	d0fa      	beq.n	8001500 <__sccl+0x44>
 800150a:	42b3      	cmp	r3, r6
 800150c:	dcf8      	bgt.n	8001500 <__sccl+0x44>
 800150e:	3002      	adds	r0, #2
 8001510:	461a      	mov	r2, r3
 8001512:	3201      	adds	r2, #1
 8001514:	4296      	cmp	r6, r2
 8001516:	54a1      	strb	r1, [r4, r2]
 8001518:	dcfb      	bgt.n	8001512 <__sccl+0x56>
 800151a:	1af2      	subs	r2, r6, r3
 800151c:	3a01      	subs	r2, #1
 800151e:	1c5d      	adds	r5, r3, #1
 8001520:	42b3      	cmp	r3, r6
 8001522:	bfa8      	it	ge
 8001524:	2200      	movge	r2, #0
 8001526:	18ab      	adds	r3, r5, r2
 8001528:	e7e1      	b.n	80014ee <__sccl+0x32>
 800152a:	4610      	mov	r0, r2
 800152c:	e7da      	b.n	80014e4 <__sccl+0x28>
	...

08001530 <__sflush_r>:
 8001530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	0716      	lsls	r6, r2, #28
 8001538:	4605      	mov	r5, r0
 800153a:	460c      	mov	r4, r1
 800153c:	d454      	bmi.n	80015e8 <__sflush_r+0xb8>
 800153e:	684b      	ldr	r3, [r1, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dc02      	bgt.n	800154a <__sflush_r+0x1a>
 8001544:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	dd48      	ble.n	80015dc <__sflush_r+0xac>
 800154a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800154c:	2e00      	cmp	r6, #0
 800154e:	d045      	beq.n	80015dc <__sflush_r+0xac>
 8001550:	2300      	movs	r3, #0
 8001552:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001556:	682f      	ldr	r7, [r5, #0]
 8001558:	6a21      	ldr	r1, [r4, #32]
 800155a:	602b      	str	r3, [r5, #0]
 800155c:	d030      	beq.n	80015c0 <__sflush_r+0x90>
 800155e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	0759      	lsls	r1, r3, #29
 8001564:	d505      	bpl.n	8001572 <__sflush_r+0x42>
 8001566:	6863      	ldr	r3, [r4, #4]
 8001568:	1ad2      	subs	r2, r2, r3
 800156a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800156c:	b10b      	cbz	r3, 8001572 <__sflush_r+0x42>
 800156e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001570:	1ad2      	subs	r2, r2, r3
 8001572:	2300      	movs	r3, #0
 8001574:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001576:	6a21      	ldr	r1, [r4, #32]
 8001578:	4628      	mov	r0, r5
 800157a:	47b0      	blx	r6
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	d106      	bne.n	8001590 <__sflush_r+0x60>
 8001582:	6829      	ldr	r1, [r5, #0]
 8001584:	291d      	cmp	r1, #29
 8001586:	d82b      	bhi.n	80015e0 <__sflush_r+0xb0>
 8001588:	4a28      	ldr	r2, [pc, #160]	@ (800162c <__sflush_r+0xfc>)
 800158a:	410a      	asrs	r2, r1
 800158c:	07d6      	lsls	r6, r2, #31
 800158e:	d427      	bmi.n	80015e0 <__sflush_r+0xb0>
 8001590:	2200      	movs	r2, #0
 8001592:	6062      	str	r2, [r4, #4]
 8001594:	04d9      	lsls	r1, r3, #19
 8001596:	6922      	ldr	r2, [r4, #16]
 8001598:	6022      	str	r2, [r4, #0]
 800159a:	d504      	bpl.n	80015a6 <__sflush_r+0x76>
 800159c:	1c42      	adds	r2, r0, #1
 800159e:	d101      	bne.n	80015a4 <__sflush_r+0x74>
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	b903      	cbnz	r3, 80015a6 <__sflush_r+0x76>
 80015a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80015a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015a8:	602f      	str	r7, [r5, #0]
 80015aa:	b1b9      	cbz	r1, 80015dc <__sflush_r+0xac>
 80015ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015b0:	4299      	cmp	r1, r3
 80015b2:	d002      	beq.n	80015ba <__sflush_r+0x8a>
 80015b4:	4628      	mov	r0, r5
 80015b6:	f7ff fb7b 	bl	8000cb0 <_free_r>
 80015ba:	2300      	movs	r3, #0
 80015bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80015be:	e00d      	b.n	80015dc <__sflush_r+0xac>
 80015c0:	2301      	movs	r3, #1
 80015c2:	4628      	mov	r0, r5
 80015c4:	47b0      	blx	r6
 80015c6:	4602      	mov	r2, r0
 80015c8:	1c50      	adds	r0, r2, #1
 80015ca:	d1c9      	bne.n	8001560 <__sflush_r+0x30>
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0c6      	beq.n	8001560 <__sflush_r+0x30>
 80015d2:	2b1d      	cmp	r3, #29
 80015d4:	d001      	beq.n	80015da <__sflush_r+0xaa>
 80015d6:	2b16      	cmp	r3, #22
 80015d8:	d11d      	bne.n	8001616 <__sflush_r+0xe6>
 80015da:	602f      	str	r7, [r5, #0]
 80015dc:	2000      	movs	r0, #0
 80015de:	e021      	b.n	8001624 <__sflush_r+0xf4>
 80015e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	e01a      	b.n	800161e <__sflush_r+0xee>
 80015e8:	690f      	ldr	r7, [r1, #16]
 80015ea:	2f00      	cmp	r7, #0
 80015ec:	d0f6      	beq.n	80015dc <__sflush_r+0xac>
 80015ee:	0793      	lsls	r3, r2, #30
 80015f0:	680e      	ldr	r6, [r1, #0]
 80015f2:	bf08      	it	eq
 80015f4:	694b      	ldreq	r3, [r1, #20]
 80015f6:	600f      	str	r7, [r1, #0]
 80015f8:	bf18      	it	ne
 80015fa:	2300      	movne	r3, #0
 80015fc:	1bf6      	subs	r6, r6, r7
 80015fe:	608b      	str	r3, [r1, #8]
 8001600:	2e00      	cmp	r6, #0
 8001602:	ddeb      	ble.n	80015dc <__sflush_r+0xac>
 8001604:	6a21      	ldr	r1, [r4, #32]
 8001606:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800160a:	4633      	mov	r3, r6
 800160c:	463a      	mov	r2, r7
 800160e:	4628      	mov	r0, r5
 8001610:	47e0      	blx	ip
 8001612:	2800      	cmp	r0, #0
 8001614:	dc07      	bgt.n	8001626 <__sflush_r+0xf6>
 8001616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800161a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800161e:	81a3      	strh	r3, [r4, #12]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001626:	4407      	add	r7, r0
 8001628:	1a36      	subs	r6, r6, r0
 800162a:	e7e9      	b.n	8001600 <__sflush_r+0xd0>
 800162c:	dfbffffe 	.word	0xdfbffffe

08001630 <_fflush_r>:
 8001630:	b538      	push	{r3, r4, r5, lr}
 8001632:	690b      	ldr	r3, [r1, #16]
 8001634:	4605      	mov	r5, r0
 8001636:	460c      	mov	r4, r1
 8001638:	b913      	cbnz	r3, 8001640 <_fflush_r+0x10>
 800163a:	2500      	movs	r5, #0
 800163c:	4628      	mov	r0, r5
 800163e:	bd38      	pop	{r3, r4, r5, pc}
 8001640:	b118      	cbz	r0, 800164a <_fflush_r+0x1a>
 8001642:	6a03      	ldr	r3, [r0, #32]
 8001644:	b90b      	cbnz	r3, 800164a <_fflush_r+0x1a>
 8001646:	f7ff fa23 	bl	8000a90 <__sinit>
 800164a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f3      	beq.n	800163a <_fflush_r+0xa>
 8001652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001654:	07d0      	lsls	r0, r2, #31
 8001656:	d404      	bmi.n	8001662 <_fflush_r+0x32>
 8001658:	0599      	lsls	r1, r3, #22
 800165a:	d402      	bmi.n	8001662 <_fflush_r+0x32>
 800165c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800165e:	f7ff fb24 	bl	8000caa <__retarget_lock_acquire_recursive>
 8001662:	4628      	mov	r0, r5
 8001664:	4621      	mov	r1, r4
 8001666:	f7ff ff63 	bl	8001530 <__sflush_r>
 800166a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800166c:	07da      	lsls	r2, r3, #31
 800166e:	4605      	mov	r5, r0
 8001670:	d4e4      	bmi.n	800163c <_fflush_r+0xc>
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	059b      	lsls	r3, r3, #22
 8001676:	d4e1      	bmi.n	800163c <_fflush_r+0xc>
 8001678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800167a:	f7ff fb17 	bl	8000cac <__retarget_lock_release_recursive>
 800167e:	e7dd      	b.n	800163c <_fflush_r+0xc>

08001680 <__malloc_lock>:
 8001680:	4801      	ldr	r0, [pc, #4]	@ (8001688 <__malloc_lock+0x8>)
 8001682:	f7ff bb12 	b.w	8000caa <__retarget_lock_acquire_recursive>
 8001686:	bf00      	nop
 8001688:	200001c0 	.word	0x200001c0

0800168c <__malloc_unlock>:
 800168c:	4801      	ldr	r0, [pc, #4]	@ (8001694 <__malloc_unlock+0x8>)
 800168e:	f7ff bb0d 	b.w	8000cac <__retarget_lock_release_recursive>
 8001692:	bf00      	nop
 8001694:	200001c0 	.word	0x200001c0

08001698 <__submore>:
 8001698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169c:	460c      	mov	r4, r1
 800169e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80016a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016a4:	4299      	cmp	r1, r3
 80016a6:	d11d      	bne.n	80016e4 <__submore+0x4c>
 80016a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ac:	f7ff fd38 	bl	8001120 <_malloc_r>
 80016b0:	b918      	cbnz	r0, 80016ba <__submore+0x22>
 80016b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016be:	63a3      	str	r3, [r4, #56]	@ 0x38
 80016c0:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80016c4:	6360      	str	r0, [r4, #52]	@ 0x34
 80016c6:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80016ca:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80016ce:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80016d2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80016d6:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80016da:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80016de:	6020      	str	r0, [r4, #0]
 80016e0:	2000      	movs	r0, #0
 80016e2:	e7e8      	b.n	80016b6 <__submore+0x1e>
 80016e4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80016e6:	0077      	lsls	r7, r6, #1
 80016e8:	463a      	mov	r2, r7
 80016ea:	f000 f80f 	bl	800170c <_realloc_r>
 80016ee:	4605      	mov	r5, r0
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d0de      	beq.n	80016b2 <__submore+0x1a>
 80016f4:	eb00 0806 	add.w	r8, r0, r6
 80016f8:	4601      	mov	r1, r0
 80016fa:	4632      	mov	r2, r6
 80016fc:	4640      	mov	r0, r8
 80016fe:	f000 fa47 	bl	8001b90 <memcpy>
 8001702:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8001706:	f8c4 8000 	str.w	r8, [r4]
 800170a:	e7e9      	b.n	80016e0 <__submore+0x48>

0800170c <_realloc_r>:
 800170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001710:	4680      	mov	r8, r0
 8001712:	4615      	mov	r5, r2
 8001714:	460c      	mov	r4, r1
 8001716:	b921      	cbnz	r1, 8001722 <_realloc_r+0x16>
 8001718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800171c:	4611      	mov	r1, r2
 800171e:	f7ff bcff 	b.w	8001120 <_malloc_r>
 8001722:	b92a      	cbnz	r2, 8001730 <_realloc_r+0x24>
 8001724:	f7ff fac4 	bl	8000cb0 <_free_r>
 8001728:	2400      	movs	r4, #0
 800172a:	4620      	mov	r0, r4
 800172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001730:	f000 fa3c 	bl	8001bac <_malloc_usable_size_r>
 8001734:	4285      	cmp	r5, r0
 8001736:	4606      	mov	r6, r0
 8001738:	d802      	bhi.n	8001740 <_realloc_r+0x34>
 800173a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800173e:	d8f4      	bhi.n	800172a <_realloc_r+0x1e>
 8001740:	4629      	mov	r1, r5
 8001742:	4640      	mov	r0, r8
 8001744:	f7ff fcec 	bl	8001120 <_malloc_r>
 8001748:	4607      	mov	r7, r0
 800174a:	2800      	cmp	r0, #0
 800174c:	d0ec      	beq.n	8001728 <_realloc_r+0x1c>
 800174e:	42b5      	cmp	r5, r6
 8001750:	462a      	mov	r2, r5
 8001752:	4621      	mov	r1, r4
 8001754:	bf28      	it	cs
 8001756:	4632      	movcs	r2, r6
 8001758:	f000 fa1a 	bl	8001b90 <memcpy>
 800175c:	4621      	mov	r1, r4
 800175e:	4640      	mov	r0, r8
 8001760:	f7ff faa6 	bl	8000cb0 <_free_r>
 8001764:	463c      	mov	r4, r7
 8001766:	e7e0      	b.n	800172a <_realloc_r+0x1e>

08001768 <_strtol_l.constprop.0>:
 8001768:	2b24      	cmp	r3, #36	@ 0x24
 800176a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800176e:	4686      	mov	lr, r0
 8001770:	4690      	mov	r8, r2
 8001772:	d801      	bhi.n	8001778 <_strtol_l.constprop.0+0x10>
 8001774:	2b01      	cmp	r3, #1
 8001776:	d106      	bne.n	8001786 <_strtol_l.constprop.0+0x1e>
 8001778:	f7ff fa6c 	bl	8000c54 <__errno>
 800177c:	2316      	movs	r3, #22
 800177e:	6003      	str	r3, [r0, #0]
 8001780:	2000      	movs	r0, #0
 8001782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001786:	4834      	ldr	r0, [pc, #208]	@ (8001858 <_strtol_l.constprop.0+0xf0>)
 8001788:	460d      	mov	r5, r1
 800178a:	462a      	mov	r2, r5
 800178c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001790:	5d06      	ldrb	r6, [r0, r4]
 8001792:	f016 0608 	ands.w	r6, r6, #8
 8001796:	d1f8      	bne.n	800178a <_strtol_l.constprop.0+0x22>
 8001798:	2c2d      	cmp	r4, #45	@ 0x2d
 800179a:	d12d      	bne.n	80017f8 <_strtol_l.constprop.0+0x90>
 800179c:	782c      	ldrb	r4, [r5, #0]
 800179e:	2601      	movs	r6, #1
 80017a0:	1c95      	adds	r5, r2, #2
 80017a2:	f033 0210 	bics.w	r2, r3, #16
 80017a6:	d109      	bne.n	80017bc <_strtol_l.constprop.0+0x54>
 80017a8:	2c30      	cmp	r4, #48	@ 0x30
 80017aa:	d12a      	bne.n	8001802 <_strtol_l.constprop.0+0x9a>
 80017ac:	782a      	ldrb	r2, [r5, #0]
 80017ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80017b2:	2a58      	cmp	r2, #88	@ 0x58
 80017b4:	d125      	bne.n	8001802 <_strtol_l.constprop.0+0x9a>
 80017b6:	786c      	ldrb	r4, [r5, #1]
 80017b8:	2310      	movs	r3, #16
 80017ba:	3502      	adds	r5, #2
 80017bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80017c0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80017c4:	2200      	movs	r2, #0
 80017c6:	fbbc f9f3 	udiv	r9, ip, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80017d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80017d4:	2f09      	cmp	r7, #9
 80017d6:	d81b      	bhi.n	8001810 <_strtol_l.constprop.0+0xa8>
 80017d8:	463c      	mov	r4, r7
 80017da:	42a3      	cmp	r3, r4
 80017dc:	dd27      	ble.n	800182e <_strtol_l.constprop.0+0xc6>
 80017de:	1c57      	adds	r7, r2, #1
 80017e0:	d007      	beq.n	80017f2 <_strtol_l.constprop.0+0x8a>
 80017e2:	4581      	cmp	r9, r0
 80017e4:	d320      	bcc.n	8001828 <_strtol_l.constprop.0+0xc0>
 80017e6:	d101      	bne.n	80017ec <_strtol_l.constprop.0+0x84>
 80017e8:	45a2      	cmp	sl, r4
 80017ea:	db1d      	blt.n	8001828 <_strtol_l.constprop.0+0xc0>
 80017ec:	fb00 4003 	mla	r0, r0, r3, r4
 80017f0:	2201      	movs	r2, #1
 80017f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80017f6:	e7eb      	b.n	80017d0 <_strtol_l.constprop.0+0x68>
 80017f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80017fa:	bf04      	itt	eq
 80017fc:	782c      	ldrbeq	r4, [r5, #0]
 80017fe:	1c95      	addeq	r5, r2, #2
 8001800:	e7cf      	b.n	80017a2 <_strtol_l.constprop.0+0x3a>
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1da      	bne.n	80017bc <_strtol_l.constprop.0+0x54>
 8001806:	2c30      	cmp	r4, #48	@ 0x30
 8001808:	bf0c      	ite	eq
 800180a:	2308      	moveq	r3, #8
 800180c:	230a      	movne	r3, #10
 800180e:	e7d5      	b.n	80017bc <_strtol_l.constprop.0+0x54>
 8001810:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001814:	2f19      	cmp	r7, #25
 8001816:	d801      	bhi.n	800181c <_strtol_l.constprop.0+0xb4>
 8001818:	3c37      	subs	r4, #55	@ 0x37
 800181a:	e7de      	b.n	80017da <_strtol_l.constprop.0+0x72>
 800181c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001820:	2f19      	cmp	r7, #25
 8001822:	d804      	bhi.n	800182e <_strtol_l.constprop.0+0xc6>
 8001824:	3c57      	subs	r4, #87	@ 0x57
 8001826:	e7d8      	b.n	80017da <_strtol_l.constprop.0+0x72>
 8001828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800182c:	e7e1      	b.n	80017f2 <_strtol_l.constprop.0+0x8a>
 800182e:	1c53      	adds	r3, r2, #1
 8001830:	d108      	bne.n	8001844 <_strtol_l.constprop.0+0xdc>
 8001832:	2322      	movs	r3, #34	@ 0x22
 8001834:	f8ce 3000 	str.w	r3, [lr]
 8001838:	4660      	mov	r0, ip
 800183a:	f1b8 0f00 	cmp.w	r8, #0
 800183e:	d0a0      	beq.n	8001782 <_strtol_l.constprop.0+0x1a>
 8001840:	1e69      	subs	r1, r5, #1
 8001842:	e006      	b.n	8001852 <_strtol_l.constprop.0+0xea>
 8001844:	b106      	cbz	r6, 8001848 <_strtol_l.constprop.0+0xe0>
 8001846:	4240      	negs	r0, r0
 8001848:	f1b8 0f00 	cmp.w	r8, #0
 800184c:	d099      	beq.n	8001782 <_strtol_l.constprop.0+0x1a>
 800184e:	2a00      	cmp	r2, #0
 8001850:	d1f6      	bne.n	8001840 <_strtol_l.constprop.0+0xd8>
 8001852:	f8c8 1000 	str.w	r1, [r8]
 8001856:	e794      	b.n	8001782 <_strtol_l.constprop.0+0x1a>
 8001858:	08001c9c 	.word	0x08001c9c

0800185c <_strtol_r>:
 800185c:	f7ff bf84 	b.w	8001768 <_strtol_l.constprop.0>

08001860 <_strtoul_l.constprop.0>:
 8001860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001864:	4e34      	ldr	r6, [pc, #208]	@ (8001938 <_strtoul_l.constprop.0+0xd8>)
 8001866:	4686      	mov	lr, r0
 8001868:	460d      	mov	r5, r1
 800186a:	4628      	mov	r0, r5
 800186c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001870:	5d37      	ldrb	r7, [r6, r4]
 8001872:	f017 0708 	ands.w	r7, r7, #8
 8001876:	d1f8      	bne.n	800186a <_strtoul_l.constprop.0+0xa>
 8001878:	2c2d      	cmp	r4, #45	@ 0x2d
 800187a:	d12f      	bne.n	80018dc <_strtoul_l.constprop.0+0x7c>
 800187c:	782c      	ldrb	r4, [r5, #0]
 800187e:	2701      	movs	r7, #1
 8001880:	1c85      	adds	r5, r0, #2
 8001882:	f033 0010 	bics.w	r0, r3, #16
 8001886:	d109      	bne.n	800189c <_strtoul_l.constprop.0+0x3c>
 8001888:	2c30      	cmp	r4, #48	@ 0x30
 800188a:	d12c      	bne.n	80018e6 <_strtoul_l.constprop.0+0x86>
 800188c:	7828      	ldrb	r0, [r5, #0]
 800188e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001892:	2858      	cmp	r0, #88	@ 0x58
 8001894:	d127      	bne.n	80018e6 <_strtoul_l.constprop.0+0x86>
 8001896:	786c      	ldrb	r4, [r5, #1]
 8001898:	2310      	movs	r3, #16
 800189a:	3502      	adds	r5, #2
 800189c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80018a0:	2600      	movs	r6, #0
 80018a2:	fbb8 f8f3 	udiv	r8, r8, r3
 80018a6:	fb03 f908 	mul.w	r9, r3, r8
 80018aa:	ea6f 0909 	mvn.w	r9, r9
 80018ae:	4630      	mov	r0, r6
 80018b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80018b4:	f1bc 0f09 	cmp.w	ip, #9
 80018b8:	d81c      	bhi.n	80018f4 <_strtoul_l.constprop.0+0x94>
 80018ba:	4664      	mov	r4, ip
 80018bc:	42a3      	cmp	r3, r4
 80018be:	dd2a      	ble.n	8001916 <_strtoul_l.constprop.0+0xb6>
 80018c0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80018c4:	d007      	beq.n	80018d6 <_strtoul_l.constprop.0+0x76>
 80018c6:	4580      	cmp	r8, r0
 80018c8:	d322      	bcc.n	8001910 <_strtoul_l.constprop.0+0xb0>
 80018ca:	d101      	bne.n	80018d0 <_strtoul_l.constprop.0+0x70>
 80018cc:	45a1      	cmp	r9, r4
 80018ce:	db1f      	blt.n	8001910 <_strtoul_l.constprop.0+0xb0>
 80018d0:	fb00 4003 	mla	r0, r0, r3, r4
 80018d4:	2601      	movs	r6, #1
 80018d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80018da:	e7e9      	b.n	80018b0 <_strtoul_l.constprop.0+0x50>
 80018dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80018de:	bf04      	itt	eq
 80018e0:	782c      	ldrbeq	r4, [r5, #0]
 80018e2:	1c85      	addeq	r5, r0, #2
 80018e4:	e7cd      	b.n	8001882 <_strtoul_l.constprop.0+0x22>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1d8      	bne.n	800189c <_strtoul_l.constprop.0+0x3c>
 80018ea:	2c30      	cmp	r4, #48	@ 0x30
 80018ec:	bf0c      	ite	eq
 80018ee:	2308      	moveq	r3, #8
 80018f0:	230a      	movne	r3, #10
 80018f2:	e7d3      	b.n	800189c <_strtoul_l.constprop.0+0x3c>
 80018f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80018f8:	f1bc 0f19 	cmp.w	ip, #25
 80018fc:	d801      	bhi.n	8001902 <_strtoul_l.constprop.0+0xa2>
 80018fe:	3c37      	subs	r4, #55	@ 0x37
 8001900:	e7dc      	b.n	80018bc <_strtoul_l.constprop.0+0x5c>
 8001902:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8001906:	f1bc 0f19 	cmp.w	ip, #25
 800190a:	d804      	bhi.n	8001916 <_strtoul_l.constprop.0+0xb6>
 800190c:	3c57      	subs	r4, #87	@ 0x57
 800190e:	e7d5      	b.n	80018bc <_strtoul_l.constprop.0+0x5c>
 8001910:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001914:	e7df      	b.n	80018d6 <_strtoul_l.constprop.0+0x76>
 8001916:	1c73      	adds	r3, r6, #1
 8001918:	d106      	bne.n	8001928 <_strtoul_l.constprop.0+0xc8>
 800191a:	2322      	movs	r3, #34	@ 0x22
 800191c:	f8ce 3000 	str.w	r3, [lr]
 8001920:	4630      	mov	r0, r6
 8001922:	b932      	cbnz	r2, 8001932 <_strtoul_l.constprop.0+0xd2>
 8001924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001928:	b107      	cbz	r7, 800192c <_strtoul_l.constprop.0+0xcc>
 800192a:	4240      	negs	r0, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	d0f9      	beq.n	8001924 <_strtoul_l.constprop.0+0xc4>
 8001930:	b106      	cbz	r6, 8001934 <_strtoul_l.constprop.0+0xd4>
 8001932:	1e69      	subs	r1, r5, #1
 8001934:	6011      	str	r1, [r2, #0]
 8001936:	e7f5      	b.n	8001924 <_strtoul_l.constprop.0+0xc4>
 8001938:	08001c9c 	.word	0x08001c9c

0800193c <_strtoul_r>:
 800193c:	f7ff bf90 	b.w	8001860 <_strtoul_l.constprop.0>

08001940 <__swbuf_r>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	460e      	mov	r6, r1
 8001944:	4614      	mov	r4, r2
 8001946:	4605      	mov	r5, r0
 8001948:	b118      	cbz	r0, 8001952 <__swbuf_r+0x12>
 800194a:	6a03      	ldr	r3, [r0, #32]
 800194c:	b90b      	cbnz	r3, 8001952 <__swbuf_r+0x12>
 800194e:	f7ff f89f 	bl	8000a90 <__sinit>
 8001952:	69a3      	ldr	r3, [r4, #24]
 8001954:	60a3      	str	r3, [r4, #8]
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	071a      	lsls	r2, r3, #28
 800195a:	d501      	bpl.n	8001960 <__swbuf_r+0x20>
 800195c:	6923      	ldr	r3, [r4, #16]
 800195e:	b943      	cbnz	r3, 8001972 <__swbuf_r+0x32>
 8001960:	4621      	mov	r1, r4
 8001962:	4628      	mov	r0, r5
 8001964:	f000 f82a 	bl	80019bc <__swsetup_r>
 8001968:	b118      	cbz	r0, 8001972 <__swbuf_r+0x32>
 800196a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800196e:	4638      	mov	r0, r7
 8001970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	6922      	ldr	r2, [r4, #16]
 8001976:	1a98      	subs	r0, r3, r2
 8001978:	6963      	ldr	r3, [r4, #20]
 800197a:	b2f6      	uxtb	r6, r6
 800197c:	4283      	cmp	r3, r0
 800197e:	4637      	mov	r7, r6
 8001980:	dc05      	bgt.n	800198e <__swbuf_r+0x4e>
 8001982:	4621      	mov	r1, r4
 8001984:	4628      	mov	r0, r5
 8001986:	f7ff fe53 	bl	8001630 <_fflush_r>
 800198a:	2800      	cmp	r0, #0
 800198c:	d1ed      	bne.n	800196a <__swbuf_r+0x2a>
 800198e:	68a3      	ldr	r3, [r4, #8]
 8001990:	3b01      	subs	r3, #1
 8001992:	60a3      	str	r3, [r4, #8]
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	6022      	str	r2, [r4, #0]
 800199a:	701e      	strb	r6, [r3, #0]
 800199c:	6962      	ldr	r2, [r4, #20]
 800199e:	1c43      	adds	r3, r0, #1
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d004      	beq.n	80019ae <__swbuf_r+0x6e>
 80019a4:	89a3      	ldrh	r3, [r4, #12]
 80019a6:	07db      	lsls	r3, r3, #31
 80019a8:	d5e1      	bpl.n	800196e <__swbuf_r+0x2e>
 80019aa:	2e0a      	cmp	r6, #10
 80019ac:	d1df      	bne.n	800196e <__swbuf_r+0x2e>
 80019ae:	4621      	mov	r1, r4
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fe3d 	bl	8001630 <_fflush_r>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d0d9      	beq.n	800196e <__swbuf_r+0x2e>
 80019ba:	e7d6      	b.n	800196a <__swbuf_r+0x2a>

080019bc <__swsetup_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <__swsetup_r+0xa8>)
 80019c0:	4605      	mov	r5, r0
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	460c      	mov	r4, r1
 80019c6:	b118      	cbz	r0, 80019d0 <__swsetup_r+0x14>
 80019c8:	6a03      	ldr	r3, [r0, #32]
 80019ca:	b90b      	cbnz	r3, 80019d0 <__swsetup_r+0x14>
 80019cc:	f7ff f860 	bl	8000a90 <__sinit>
 80019d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019d4:	0719      	lsls	r1, r3, #28
 80019d6:	d422      	bmi.n	8001a1e <__swsetup_r+0x62>
 80019d8:	06da      	lsls	r2, r3, #27
 80019da:	d407      	bmi.n	80019ec <__swsetup_r+0x30>
 80019dc:	2209      	movs	r2, #9
 80019de:	602a      	str	r2, [r5, #0]
 80019e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019e4:	81a3      	strh	r3, [r4, #12]
 80019e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ea:	e033      	b.n	8001a54 <__swsetup_r+0x98>
 80019ec:	0758      	lsls	r0, r3, #29
 80019ee:	d512      	bpl.n	8001a16 <__swsetup_r+0x5a>
 80019f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019f2:	b141      	cbz	r1, 8001a06 <__swsetup_r+0x4a>
 80019f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019f8:	4299      	cmp	r1, r3
 80019fa:	d002      	beq.n	8001a02 <__swsetup_r+0x46>
 80019fc:	4628      	mov	r0, r5
 80019fe:	f7ff f957 	bl	8000cb0 <_free_r>
 8001a02:	2300      	movs	r3, #0
 8001a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a06:	89a3      	ldrh	r3, [r4, #12]
 8001a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	6063      	str	r3, [r4, #4]
 8001a12:	6923      	ldr	r3, [r4, #16]
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	81a3      	strh	r3, [r4, #12]
 8001a1e:	6923      	ldr	r3, [r4, #16]
 8001a20:	b94b      	cbnz	r3, 8001a36 <__swsetup_r+0x7a>
 8001a22:	89a3      	ldrh	r3, [r4, #12]
 8001a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a2c:	d003      	beq.n	8001a36 <__swsetup_r+0x7a>
 8001a2e:	4621      	mov	r1, r4
 8001a30:	4628      	mov	r0, r5
 8001a32:	f000 f83f 	bl	8001ab4 <__smakebuf_r>
 8001a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a3a:	f013 0201 	ands.w	r2, r3, #1
 8001a3e:	d00a      	beq.n	8001a56 <__swsetup_r+0x9a>
 8001a40:	2200      	movs	r2, #0
 8001a42:	60a2      	str	r2, [r4, #8]
 8001a44:	6962      	ldr	r2, [r4, #20]
 8001a46:	4252      	negs	r2, r2
 8001a48:	61a2      	str	r2, [r4, #24]
 8001a4a:	6922      	ldr	r2, [r4, #16]
 8001a4c:	b942      	cbnz	r2, 8001a60 <__swsetup_r+0xa4>
 8001a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a52:	d1c5      	bne.n	80019e0 <__swsetup_r+0x24>
 8001a54:	bd38      	pop	{r3, r4, r5, pc}
 8001a56:	0799      	lsls	r1, r3, #30
 8001a58:	bf58      	it	pl
 8001a5a:	6962      	ldrpl	r2, [r4, #20]
 8001a5c:	60a2      	str	r2, [r4, #8]
 8001a5e:	e7f4      	b.n	8001a4a <__swsetup_r+0x8e>
 8001a60:	2000      	movs	r0, #0
 8001a62:	e7f7      	b.n	8001a54 <__swsetup_r+0x98>
 8001a64:	20000010 	.word	0x20000010

08001a68 <__swhatbuf_r>:
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a70:	2900      	cmp	r1, #0
 8001a72:	b096      	sub	sp, #88	@ 0x58
 8001a74:	4615      	mov	r5, r2
 8001a76:	461e      	mov	r6, r3
 8001a78:	da0d      	bge.n	8001a96 <__swhatbuf_r+0x2e>
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	bf14      	ite	ne
 8001a86:	2340      	movne	r3, #64	@ 0x40
 8001a88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	6031      	str	r1, [r6, #0]
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	b016      	add	sp, #88	@ 0x58
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
 8001a96:	466a      	mov	r2, sp
 8001a98:	f000 f848 	bl	8001b2c <_fstat_r>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	dbec      	blt.n	8001a7a <__swhatbuf_r+0x12>
 8001aa0:	9901      	ldr	r1, [sp, #4]
 8001aa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001aa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001aaa:	4259      	negs	r1, r3
 8001aac:	4159      	adcs	r1, r3
 8001aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab2:	e7eb      	b.n	8001a8c <__swhatbuf_r+0x24>

08001ab4 <__smakebuf_r>:
 8001ab4:	898b      	ldrh	r3, [r1, #12]
 8001ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ab8:	079d      	lsls	r5, r3, #30
 8001aba:	4606      	mov	r6, r0
 8001abc:	460c      	mov	r4, r1
 8001abe:	d507      	bpl.n	8001ad0 <__smakebuf_r+0x1c>
 8001ac0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	6123      	str	r3, [r4, #16]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	6163      	str	r3, [r4, #20]
 8001acc:	b003      	add	sp, #12
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	ab01      	add	r3, sp, #4
 8001ad2:	466a      	mov	r2, sp
 8001ad4:	f7ff ffc8 	bl	8001a68 <__swhatbuf_r>
 8001ad8:	9f00      	ldr	r7, [sp, #0]
 8001ada:	4605      	mov	r5, r0
 8001adc:	4639      	mov	r1, r7
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f7ff fb1e 	bl	8001120 <_malloc_r>
 8001ae4:	b948      	cbnz	r0, 8001afa <__smakebuf_r+0x46>
 8001ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aea:	059a      	lsls	r2, r3, #22
 8001aec:	d4ee      	bmi.n	8001acc <__smakebuf_r+0x18>
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	81a3      	strh	r3, [r4, #12]
 8001af8:	e7e2      	b.n	8001ac0 <__smakebuf_r+0xc>
 8001afa:	89a3      	ldrh	r3, [r4, #12]
 8001afc:	6020      	str	r0, [r4, #0]
 8001afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b02:	81a3      	strh	r3, [r4, #12]
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001b0a:	b15b      	cbz	r3, 8001b24 <__smakebuf_r+0x70>
 8001b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b10:	4630      	mov	r0, r6
 8001b12:	f000 f81d 	bl	8001b50 <_isatty_r>
 8001b16:	b128      	cbz	r0, 8001b24 <__smakebuf_r+0x70>
 8001b18:	89a3      	ldrh	r3, [r4, #12]
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	81a3      	strh	r3, [r4, #12]
 8001b24:	89a3      	ldrh	r3, [r4, #12]
 8001b26:	431d      	orrs	r5, r3
 8001b28:	81a5      	strh	r5, [r4, #12]
 8001b2a:	e7cf      	b.n	8001acc <__smakebuf_r+0x18>

08001b2c <_fstat_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	4d07      	ldr	r5, [pc, #28]	@ (8001b4c <_fstat_r+0x20>)
 8001b30:	2300      	movs	r3, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	f7fe fd15 	bl	8000568 <_fstat>
 8001b3e:	1c43      	adds	r3, r0, #1
 8001b40:	d102      	bne.n	8001b48 <_fstat_r+0x1c>
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	b103      	cbz	r3, 8001b48 <_fstat_r+0x1c>
 8001b46:	6023      	str	r3, [r4, #0]
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001bc 	.word	0x200001bc

08001b50 <_isatty_r>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4d06      	ldr	r5, [pc, #24]	@ (8001b6c <_isatty_r+0x1c>)
 8001b54:	2300      	movs	r3, #0
 8001b56:	4604      	mov	r4, r0
 8001b58:	4608      	mov	r0, r1
 8001b5a:	602b      	str	r3, [r5, #0]
 8001b5c:	f7fe fd13 	bl	8000586 <_isatty>
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	d102      	bne.n	8001b6a <_isatty_r+0x1a>
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	b103      	cbz	r3, 8001b6a <_isatty_r+0x1a>
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	200001bc 	.word	0x200001bc

08001b70 <_sbrk_r>:
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4d06      	ldr	r5, [pc, #24]	@ (8001b8c <_sbrk_r+0x1c>)
 8001b74:	2300      	movs	r3, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	602b      	str	r3, [r5, #0]
 8001b7c:	f7fe fd1a 	bl	80005b4 <_sbrk>
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	d102      	bne.n	8001b8a <_sbrk_r+0x1a>
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	b103      	cbz	r3, 8001b8a <_sbrk_r+0x1a>
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	200001bc 	.word	0x200001bc

08001b90 <memcpy>:
 8001b90:	440a      	add	r2, r1
 8001b92:	4291      	cmp	r1, r2
 8001b94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001b98:	d100      	bne.n	8001b9c <memcpy+0xc>
 8001b9a:	4770      	bx	lr
 8001b9c:	b510      	push	{r4, lr}
 8001b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ba6:	4291      	cmp	r1, r2
 8001ba8:	d1f9      	bne.n	8001b9e <memcpy+0xe>
 8001baa:	bd10      	pop	{r4, pc}

08001bac <_malloc_usable_size_r>:
 8001bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bb0:	1f18      	subs	r0, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bfbc      	itt	lt
 8001bb6:	580b      	ldrlt	r3, [r1, r0]
 8001bb8:	18c0      	addlt	r0, r0, r3
 8001bba:	4770      	bx	lr

08001bbc <_init>:
 8001bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbe:	bf00      	nop
 8001bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc2:	bc08      	pop	{r3}
 8001bc4:	469e      	mov	lr, r3
 8001bc6:	4770      	bx	lr

08001bc8 <_fini>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr
